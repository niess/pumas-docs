{"files":[{"file":"pumas.h","functions":["pumas_locals_cb","pumas_recorder_cb","pumas_medium_cb","pumas_function_t","pumas_handler_cb","pumas_random_cb","pumas_physics_create","pumas_physics_destroy","pumas_physics_dump","pumas_physics_load","pumas_context_transport","pumas_physics_print","pumas_version","pumas_physics_particle","pumas_error_function","pumas_error_handler_set","pumas_error_handler_get","pumas_error_catch","pumas_error_raise","pumas_context_create","pumas_context_destroy","pumas_context_physics_get","pumas_physics_property_grammage","pumas_physics_property_proper_time","pumas_physics_property_magnetic_rotation","pumas_physics_property_kinetic_energy","pumas_physics_property_energy_loss","pumas_physics_property_scattering_length","pumas_physics_property_cross_section","pumas_physics_material_name","pumas_physics_material_index","pumas_physics_material_length","pumas_physics_composite_length","pumas_physics_composite_update","pumas_physics_composite_properties","pumas_physics_table_value","pumas_physics_table_length","pumas_physics_table_index","pumas_recorder_create","pumas_recorder_clear","pumas_recorder_destroy","pumas_allocate_cb","pumas_memory_allocator","pumas_reallocate_cb","pumas_memory_reallocator","pumas_deallocate_cb","pumas_memory_deallocator","pumas_physics_tabulate","pumas_physics_tabulation_clear","pumas_physics_create_tabulation"],"meta":{},"lines":1517}],"functions":{"pumas_physics_create":{"type":"function","file":"pumas.h","line":549,"lineto":551,"args":[{"name":"physics","type":"struct pumas_physics **","comment":"Handle for the Physics tables.\n"},{"name":"particle","type":"enum pumas_particle","comment":"The type of the particle to transport.\n"},{"name":"mdf_path","type":"const char *","comment":"The path to a Material Description File (MDF), or <code>NULL</code>.\n"},{"name":"dedx_path","type":"const char *","comment":"The path to the energy loss tabulation(s), or <code>NULL</code>.\n"}],"argline":"struct pumas_physics **physics, enum pumas_particle particle, const char *mdf_path, const char *dedx_path","sig":"struct pumas_physics **::enum pumas_particle::const char *::const char *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Initialise the Physics.</p>\n","comments":"<p>Initialise the Physics from a MDF and a set of energy loss tabulations. Load the materials data and precompute various properties. <em>mdf_path</em> and/or <em>dedx_path</em> can be set to <code>NULL</code>. If so the corresponding path is read from the <code>PUMAS_MDF</code> or <code>PUMAS_DEDX</code> environment variable.</p>\n\n<p>Call <code>pumas_physics_destroy</code> in order to unload the Physics and release the corresponding alocated memory.</p>\n\n<p><strong>Warnings</strong> : this function is not thread safe.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_END_OF_FILE             And unexpected EOF occured.\n\n PUMAS_RETURN_FORMAT_ERROR            A file has a wrong format.\n\n PUMAS_RETURN_INCOMPLETE_FILE         There are missing entries in the MDF.\n\n PUMAS_RETURN_IO_ERROR                A file couldn&#39;t be read.\n\n PUMAS_RETURN_MEMORY_ERROR            Couldn&#39;t allocate memory.\n\n PUMAS_RETURN_PATH_ERROR              A file couldn&#39;t be opened.\n\n PUMAS_RETURN_PHYSICS_ERROR           A `NULL` physics pointer was provided.\n\n PUMAS_RETURN_TOO_LONG                Some XML node in the MDF is too long.\n\n PUMAS_RETURN_UNDEFINED_DEDX          No energy loss path was provided.\n\n PUMAS_RETURN_UNDEFINED_MDF           No MDF was provided.\n\n PUMAS_RETURN_UNKNOWN_ELEMENT         An element in the MDF wasn&#39;t defined.\n\n PUMAS_RETURN_UNKNOWN_MATERIAL        An material in the MDF wasn&#39;t defined.\n\n PUMAS_RETURN_UNKNOWN_PARTICLE        The given type is not supported.\n</code></pre>\n","group":"physics"},"pumas_physics_destroy":{"type":"function","file":"pumas.h","line":564,"lineto":564,"args":[{"name":"physics","type":"struct pumas_physics **","comment":"Handle for the Physics tables.\n"}],"argline":"struct pumas_physics **physics","sig":"struct pumas_physics **","return":{"type":"void","comment":null},"description":"<p>Destroy a Physics instance.</p>\n","comments":"<p>Finalise the Physics and free the shared memory. Call <code>pumas_physics_create</code> in order to reload the Physics.</p>\n\n<p><strong>Warnings</strong> : This function is not thread safe. Finalising the Physics doesn&#39;t release the memory allocated for any <code>pumas_context</code>.</p>\n","group":"physics"},"pumas_physics_dump":{"type":"function","file":"pumas.h","line":591,"lineto":592,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"Handle for the Physics tables.\n"},{"name":"stream","type":"FILE *","comment":"The stream where to dump.\n"}],"argline":"const struct pumas_physics *physics, FILE *stream","sig":"const struct pumas_physics *::FILE *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Dump the Physics configuration to a stream.</p>\n","comments":"<p>Dump the Physics tables to a stream as a binary object. Note that only globally shared data are dumped, i.e. material properties and tables as read from a MDF. Simulation contexts, media, recorders, ect. ... are not. This binary dump allows for a fast initialisation of the Physics in subsequent uses.</p>\n\n<p><strong>Warnings</strong> : The binary dump is raw formated, hence <em>a priori</em> platform dependent.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_PHYSICS_ERROR           The Physics is not initialised.\n\n PUMAS_RETURN_PATH_ERROR              The output stream in invalid (null).\n\n PUMAS_RETURN_IO_ERROR                Couldn&#39;t write to the stream.\n</code></pre>\n","group":"physics"},"pumas_physics_load":{"type":"function","file":"pumas.h","line":619,"lineto":620,"args":[{"name":"physics","type":"struct pumas_physics **","comment":"Handle for the Physics tables.\n"},{"name":"stream","type":"FILE *","comment":"The stream to load from.\n"}],"argline":"struct pumas_physics **physics, FILE *stream","sig":"struct pumas_physics **::FILE *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Load the Physics from a binary dump.</p>\n","comments":"<p>Load the Physics tables from a binary dump and initialise accordingly.</p>\n\n<p><strong>Warnings</strong> : The binary dump is raw formated, hence <em>a priori</em> platform dependent. Trying to (re-)initialise an already initialised Physics will generate an error. <code>pumas_physics_destroy</code> must be called first.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_FORMAT_ERROR            The binary dump is not compatible with the current version.\n\n PUMAS_RETURN_PHYSICS_ERROR           The Physics is not initialised.\n\n PUMAS_RETURN_PATH_ERROR              The input stream in invalid (null).\n\n PUMAS_RETURN_IO_ERROR                Couldn&#39;t read from the stream.\n</code></pre>\n","group":"physics"},"pumas_context_transport":{"type":"function","file":"pumas.h","line":654,"lineto":656,"args":[{"name":"context","type":"struct pumas_context *","comment":"The simulation context.\n"},{"name":"state","type":"struct pumas_state *","comment":"The initial state or the final state at return.\n"},{"name":"event","type":"enum pumas_event *","comment":"The <code>pumas_event</code> at return, or <code>ǸULL</code>.\n"},{"name":"media","type":"struct pumas_medium *[2]","comment":"The initial and final media, or <code>ǸULL</code>.\n"}],"argline":"struct pumas_context *context, struct pumas_state *state, enum pumas_event *event, struct pumas_medium *[2] media","sig":"struct pumas_context *::struct pumas_state *::enum pumas_event *::struct pumas_medium *[2]","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Transport a particle according to the configured <code>pumas_context</code>.</p>\n","comments":"<p>Depending on the <em>context</em> configuration the particle is transported through one or more media, as provided by the <em>medium</em> callback. At return, the particle <em>state</em> is updated. If <em>event</em> is not <code>NULL</code> it will be filled with the end step event flag. In addition, if <em>media</em> is not <code>ǸULL</code> it will contain the initial (<code>media[0]</code>) and final (<code>media[1]</code>) media crossed by the particle.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_DENSITY_ERROR           A null or negative density was encountered.\n\n PUMAS_RETURN_PHYSICS_ERROR           The Physics is not initalised.\n\n PUMAS_RETURN_MEDIUM_ERROR            No propagation medium.\n\n PUMAS_RETURN_MISSING_LIMIT           An external limit is needed.\n\n PUMAS_RETURN_MISSING_RANDOM          A *random* callback is needed.\n\n PUMAS_RETURN_VALUE_ERROR             State or context is `NULL`.\n</code></pre>\n","group":"context"},"pumas_physics_print":{"type":"function","file":"pumas.h","line":684,"lineto":686,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"Handle for the Physics tables.\n"},{"name":"stream","type":"FILE *","comment":"A stream where the summary will be formated to.\n"},{"name":"tabulation","type":"const char *","comment":"The tabulation separator or <code>NULL</code>.\n"},{"name":"newline","type":"const char *","comment":"The newline separator or <code>NULL</code>.\n"}],"argline":"const struct pumas_physics *physics, FILE *stream, const char *tabulation, const char *newline","sig":"const struct pumas_physics *::FILE *::const char *::const char *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Print a summary of the Physics configuration.</p>\n","comments":"<p>The summary is JSON formated. It provides information on loaded materials as well as some basic statistics. The <em>tabulation</em> and <em>newline</em> parameters allow to control the output rendering.</p>\n\n<p><strong>Warnings</strong></p>\n\n<p>This function is <strong>not</strong> thread safe. A lock must be set to ensure proper printout in multithreaded applications, if writing concurrently to a same <em>stream</em>.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_PHYSICS_ERROR           The Physics is not initalised.\n\n PUMAS_RETURN_IO_ERROR                Couldn&#39;t write to *stream*.\n</code></pre>\n","group":"physics"},"pumas_version":{"type":"function","file":"pumas.h","line":696,"lineto":696,"args":[],"argline":"","sig":"","return":{"type":"int","comment":"The library version encoded on an <code>int</code>.\n"},"description":"<p>Get the version of the PUMAS library.</p>\n","comments":"<p>The library version is encoded on an <code>int</code> as 100*(MAJOR.MINOR). E.g. PUMAS version <code>0.15</code> would yield <code>15</code>.</p>\n","group":"pumas"},"pumas_physics_particle":{"type":"function","file":"pumas.h","line":715,"lineto":717,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"Handle for the Physics tables.\n"},{"name":"particle","type":"enum pumas_particle *","comment":"The type of the transported particle or <code>NULL</code>.\n"},{"name":"lifetime","type":"double *","comment":"The type of the transported particle, in m, or <code>NULL</code>.\n"},{"name":"mass","type":"double *","comment":"The mass of the transported particle, in GeV, or <code>NULL</code>.\n"}],"argline":"const struct pumas_physics *physics, enum pumas_particle *particle, double *lifetime, double *mass","sig":"const struct pumas_physics *::enum pumas_particle *::double *::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Get info on the transported particle.</p>\n","comments":"<p>Retrieve info on the transported particle. If not needed, an argument can be set to <code>NULL</code>.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_PHYSICS_ERROR    The Physics is not initalised.\n</code></pre>\n","group":"physics"},"pumas_error_function":{"type":"function","file":"pumas.h","line":728,"lineto":728,"args":[{"name":"function","type":"pumas_function_t *","comment":"The library function.\n"}],"argline":"pumas_function_t *function","sig":"pumas_function_t *","return":{"type":"const char *","comment":"a static string.\n"},"description":"<p>Return a string describing a PUMAS library function.</p>\n","comments":"<p>This function is meant for verbosing when handling errors. It is thread safe.</p>\n","group":"error"},"pumas_error_handler_set":{"type":"function","file":"pumas.h","line":742,"lineto":742,"args":[{"name":"handler","type":"pumas_handler_cb *","comment":"The error handler to set or <code>NULL</code>.\n"}],"argline":"pumas_handler_cb *handler","sig":"pumas_handler_cb *","return":{"type":"void","comment":null},"description":"<p>Set or clear the error handler.</p>\n","comments":"<p>Set the error handler callback for PUMAS library functions. If <em>handler</em> is set to <code>NULL</code> error callbacks are disabled.</p>\n\n<p><strong>Warnings</strong></p>\n\n<p>This function is <strong>not</strong> thread safe.</p>\n","group":"error"},"pumas_error_handler_get":{"type":"function","file":"pumas.h","line":749,"lineto":749,"args":[],"argline":"","sig":"","return":{"type":"pumas_handler_cb *","comment":"The current error handler or <code>NULL</code> if none.\n"},"description":"<p>Get the current error handler.</p>\n","comments":"","group":"error"},"pumas_error_catch":{"type":"function","file":"pumas.h","line":766,"lineto":766,"args":[{"name":"enable","type":"int","comment":"A flag for enabling or disabling error catch.\n"}],"argline":"int enable","sig":"int","return":{"type":"void","comment":null},"description":"<p>Catch the next error.</p>\n","comments":"<p>Enable or disable the catch of the next PUMAS library error. While enabled library errors will <strong>not</strong> trigger the error handler. Note however that only the first occuring error will be caught. Call <code>pumas_error_raise</code> to enable the error handler again and raise any caught error.</p>\n\n<p><strong>Warnings</strong></p>\n\n<p>This function is not thread safe. Only a single error stream can be handled at a time.</p>\n","group":"error"},"pumas_error_raise":{"type":"function","file":"pumas.h","line":789,"lineto":789,"args":[],"argline":"","sig":"","return":{"type":"enum pumas_return","comment":"If no error was caught <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise\n an error code is returned as detailed below.\n"},"description":"<p>Raise any caught error.</p>\n","comments":"<p>Raise any caught error. Error catching must have been enabled first with <code>pumas_error_catch</code> otherwise a specfic <code>PUMAS_RETURN_RAISE_ERROR</code> is returned. Note that calling this function disables further error&#39;s catching.</p>\n\n<p><strong>Warnings</strong></p>\n\n<p>This function is not thread safe. Only a single error stream can be handled at a time.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_RAISE_ERROR    Error catching hasn&#39;t been enabled.\n\n PUMAS_RETURN_*              Any caught error&#39;s code.\n</code></pre>\n","group":"error"},"pumas_context_create":{"type":"function","file":"pumas.h","line":815,"lineto":817,"args":[{"name":"context","type":"struct pumas_context **","comment":"A handle for the simulation context.\n"},{"name":"physics","type":"const struct pumas_physics *","comment":"Handle for the physics tables.\n"},{"name":"extra_memory","type":"int","comment":"The size of the user extra memory, if any is claimed.\n"}],"argline":"struct pumas_context **context, const struct pumas_physics *physics, int extra_memory","sig":"struct pumas_context **::const struct pumas_physics *::int","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Create a simulation context.</p>\n","comments":"<p>Create a new simulation context with a default configuration. Call <code>pumas_context_destroy</code> in order to release all the memory allocated for the context. Note that Physics tables must have been initialised / loaded first.</p>\n\n<p>If <code>extra_memory</code> is strictly positive the context will be extended by <code>extra_memory</code> bytes for user usage. This memory can then be accessed with the <code>user_data</code> field of the returned <code>pumas_context</code> structure.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_PHYSICS_ERROR           The Physics is not initialised.\n\n PUMAS_RETURN_MEMORY_ERROR            Couldn&#39;t allocate memory.\n</code></pre>\n","group":"context"},"pumas_context_destroy":{"type":"function","file":"pumas.h","line":828,"lineto":828,"args":[{"name":"context","type":"struct pumas_context **","comment":"The simulation context.\n"}],"argline":"struct pumas_context **context","sig":"struct pumas_context **","return":{"type":"void","comment":null},"description":"<p>Destroy a simulation context.</p>\n","comments":"<p>Call on a previously created context with <code>pumas_context_create</code> in order to release the corresponding dynamicaly allocated memory. On return <code>context</code> is set to <code>NULL</code>.</p>\n","group":"context"},"pumas_context_physics_get":{"type":"function","file":"pumas.h","line":839,"lineto":840,"args":[{"name":"context","type":"const struct pumas_context *","comment":"The simulation context.\n"}],"argline":"const struct pumas_context *context","sig":"const struct pumas_context *","return":{"type":"const struct pumas_physics *","comment":"A handle for the Physics tables or <code>NULL</code>.\n"},"description":"<p>Get the Physics used by a simulation context.</p>\n","comments":"<p>The set of Physics tables used by a <code>pumas_context</code> cannot be changed. Instead a new context must be created if different Physics is needed.</p>\n","group":"context"},"pumas_physics_property_grammage":{"type":"function","file":"pumas.h","line":865,"lineto":867,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"Handle for the Physics tables.\n"},{"name":"scheme","type":"enum pumas_scheme","comment":"The energy loss scheme.\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"kinetic","type":"double","comment":"The initial kinetic energy, in GeV.\n"},{"name":"grammage","type":"double *","comment":"The grammage in kg/m<sup>2</sup>.\n"}],"argline":"const struct pumas_physics *physics, enum pumas_scheme scheme, int material, double kinetic, double *grammage","sig":"const struct pumas_physics *::enum pumas_scheme::int::double::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Get the total grammage that a particle can travel assuming continuous\n energy loss.</p>\n","comments":"<p>The energy loss scheme must be one of <code>PUMAS_SCHEME_CSDA</code> or <code>PUMAS_SCHEME_HYBRID</code>. For a uniform medium, divide the return value by the density in order to get the corresponding total travelled distance.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The scheme of material index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR           The Physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_property_proper_time":{"type":"function","file":"pumas.h","line":891,"lineto":893,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"Handle for the Physics tables.\n"},{"name":"scheme","type":"enum pumas_scheme","comment":"The energy loss scheme.\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"kinetic","type":"double","comment":"The initial kinetic energy, in GeV.\n"},{"name":"time","type":"double *","comment":"The normalised proper time in kg/m<sup>2</sup>.\n"}],"argline":"const struct pumas_physics *physics, enum pumas_scheme scheme, int material, double kinetic, double *time","sig":"const struct pumas_physics *::enum pumas_scheme::int::double::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Get the normalised total proper time spent assuming continuous energy loss.</p>\n","comments":"<p>The energy loss scheme must be one of <code>PUMAS_SCHEME_CSDA</code> or <code>PUMAS_SCHEME_HYBRID</code>. Divide the returned value by the medium density times <em>c</em> in order to get the proper time in unit of time.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The scheme of material index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR           The Physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_property_magnetic_rotation":{"type":"function","file":"pumas.h","line":915,"lineto":917,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"Handle for the Physics tables.\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"kinetic","type":"double","comment":"The initial kinetic energy, in GeV.\n"},{"name":"angle","type":"double *","comment":"The normalised rotation angle in rad kg/m<sup>3</sup>/T.\n"}],"argline":"const struct pumas_physics *physics, int material, double kinetic, double *angle","sig":"const struct pumas_physics *::int::double::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Get the normalised rotation angle due to a uniform magnetic field for\n a CSDA particle.</p>\n","comments":"<p>Multiply the returned value by the transverse magnetic field amplitude and divide by the density in order to get the rotation angle in radian.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The material index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR           The Physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_property_kinetic_energy":{"type":"function","file":"pumas.h","line":941,"lineto":943,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"Handle for the Physics tables.\n"},{"name":"scheme","type":"enum pumas_scheme","comment":"The energy loss scheme\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"grammage","type":"double","comment":"The requested grammage, in kg/m<sup>2</sup>.\n"},{"name":"kinetic","type":"double *","comment":"The required kinetic energy in GeV.\n"}],"argline":"const struct pumas_physics *physics, enum pumas_scheme scheme, int material, double grammage, double *kinetic","sig":"const struct pumas_physics *::enum pumas_scheme::int::double::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Get the minimum kinetic energy required for travelling over a given\n <code>grammage</code>, assuming continuous energy loss.</p>\n","comments":"<p>The energy loss scheme must be one of <code>PUMAS_SCHEME_CSDA</code> or <code>PUMAS_SCHEME_HYBRID</code>.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The scheme of material index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR           The Physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_property_energy_loss":{"type":"function","file":"pumas.h","line":966,"lineto":968,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"Handle for the Physics tables.\n"},{"name":"scheme","type":"enum pumas_scheme","comment":"The energy loss scheme\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"kinetic","type":"double","comment":"The kinetic energy, in GeV.\n"},{"name":"dedx","type":"double *","comment":"The computed energy loss in GeV/(kg/m<sup>2</sup>).\n"}],"argline":"const struct pumas_physics *physics, enum pumas_scheme scheme, int material, double kinetic, double *dedx","sig":"const struct pumas_physics *::enum pumas_scheme::int::double::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Get the average energy loss per unit weight of material.</p>\n","comments":"<p>The energy loss scheme must be one of <code>PUMAS_SCHEME_CSDA</code> or <code>PUMAS_SCHEME_HYBRID</code>.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The scheme of material index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR           The Physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_property_scattering_length":{"type":"function","file":"pumas.h","line":993,"lineto":995,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"Handle for the Physics tables.\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"kinetic","type":"double","comment":"The kinetic energy, in GeV.\n"},{"name":"length","type":"double *","comment":"The computed MSC length in kg/m<sup>2</sup>.\n"}],"argline":"const struct pumas_physics *physics, int material, double kinetic, double *length","sig":"const struct pumas_physics *::int::double::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Get the Multiple SCattering (MSC) 1<sup>st</sup> transport path length for a\n unit weight.</p>\n","comments":"<p>The MSC 1<sup>st</sup> transport path length, λ, is related to the standard deviation of the polar scattering angle&#39;s as θ<sup>2</sup> = X/(2λ), with X the column depth.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The material index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR           The Physics is not initialised.\n\n PUMAS_RETURN_VALUE_ERROR             The MSC path length is infinite.\n</code></pre>\n","group":"physics"},"pumas_physics_property_cross_section":{"type":"function","file":"pumas.h","line":1017,"lineto":1019,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"Handle for the Physics tables.\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"kinetic","type":"double","comment":"The kinetic energy, in GeV.\n"},{"name":"cross_section","type":"double *","comment":"The computed cross-section value.\n"}],"argline":"const struct pumas_physics *physics, int material, double kinetic, double *cross_section","sig":"const struct pumas_physics *::int::double::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Get the macroscopic total inelastic cross-section.</p>\n","comments":"<p>The returned cross-section value is in unit m<sup>2</sup>/kg. Multiply by the density in order to get the inverse of the interaction length in unit of distance.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The material index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR           The Physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_material_name":{"type":"function","file":"pumas.h","line":1038,"lineto":1039,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"Handle for the Physics tables.\n"},{"name":"index","type":"int","comment":"The material index.\n"},{"name":"material","type":"const char **","comment":"The corresponding material name.\n"}],"argline":"const struct pumas_physics *physics, int index, const char **material","sig":"const struct pumas_physics *::int::const char **","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>The name of a material given its index.</p>\n","comments":"<p>The material name is defined in the Material Description File (MDF).</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR               The provided index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR             The Physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_material_index":{"type":"function","file":"pumas.h","line":1059,"lineto":1060,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"Handle for the Physics tables.\n"},{"name":"material","type":"const char *","comment":"The material name.\n"},{"name":"index","type":"int *","comment":"The corresponding index.\n"}],"argline":"const struct pumas_physics *physics, const char *material, int *index","sig":"const struct pumas_physics *::const char *::int *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>The index of a material given its name.</p>\n","comments":"<p>The material index corresponds to the order of declaration specified in the Material Description File (MDF).</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_PHYSICS_ERROR             The Physics is not initialised.\n\n PUMAS_RETURN_UNKNOWN_MATERIAL          The material is not defined.\n</code></pre>\n","group":"physics"},"pumas_physics_material_length":{"type":"function","file":"pumas.h","line":1068,"lineto":1069,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"Handle for the Physics tables.\n"}],"argline":"const struct pumas_physics *physics","sig":"const struct pumas_physics *","return":{"type":"int","comment":"The total number of known materials, basic plus composite.\n"},"description":"<p>The total number of materials.</p>\n","comments":"","group":"physics"},"pumas_physics_composite_length":{"type":"function","file":"pumas.h","line":1077,"lineto":1078,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"Handle for the Physics tables.\n"}],"argline":"const struct pumas_physics *physics","sig":"const struct pumas_physics *","return":{"type":"int","comment":"The number of composite materials.\n"},"description":"<p>The number of composite materials.</p>\n","comments":"","group":"physics"},"pumas_physics_composite_update":{"type":"function","file":"pumas.h","line":1106,"lineto":1108,"args":[{"name":"physics","type":"struct pumas_physics *","comment":"Handle for the Physics tables.\n"},{"name":"material","type":"int","comment":"The composite material index.\n"},{"name":"fractions","type":"const double *","comment":"The vector of mass fractions of the base materials\n                   components.\n"},{"name":"densities","type":"const double *","comment":"The vector of densities of the base materials components.\n"}],"argline":"struct pumas_physics *physics, int material, const double *fractions, const double *densities","sig":"struct pumas_physics *::int::const double *::const double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Update the properties of a composite material.</p>\n","comments":"<p>Update the composition and/or the density of a composite material. <code>fractions</code> or <code>densities</code> can be <code>NULL</code> in which case the corresponding property is not updated.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_DENSITY_ERROR             Some density value is null or less.\n\n PUMAS_RETURN_INDEX_ERROR               The provided index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR             The Physics is not initialised.\n\n PUMAS_RETURN_MEMORY_ERROR              Couldn&#39;t allocate memory.\n</code></pre>\n","group":"physics"},"pumas_physics_composite_properties":{"type":"function","file":"pumas.h","line":1133,"lineto":1135,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"Handle for the Physics tables.\n"},{"name":"index","type":"int","comment":"The composite material index.\n"},{"name":"density","type":"double *","comment":"The composite material reference density.\n"},{"name":"components","type":"int *","comment":"The number of base material components of the composite.\n"},{"name":"fractions","type":"double *","comment":"The vector of mass fractions of the base materials\n                   components.\n"},{"name":"densities","type":"double *","comment":"The vector of densities of the base materials components.\n"}],"argline":"const struct pumas_physics *physics, int index, double *density, int *components, double *fractions, double *densities","sig":"const struct pumas_physics *::int::double *::int *::double *::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Get the properties of a composite material.</p>\n","comments":"<p>Get the properties of a composite material. <code>density</code>, <code>components</code>, <code>fractions</code> or <code>densities</code> can be <code>NULL</code> in which case the corresponding property is not retrieved.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR               The provided index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR             The Physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_table_value":{"type":"function","file":"pumas.h","line":1163,"lineto":1165,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"Handle for the Physics tables.\n"},{"name":"property","type":"enum pumas_property","comment":"The column index of a property of interest.\n"},{"name":"scheme","type":"enum pumas_scheme","comment":"The energy loss scheme.\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"row","type":"int","comment":"The kinetic value row index in the table.\n"},{"name":"value","type":"double *","comment":"The corresponding table value.\n"}],"argline":"const struct pumas_physics *physics, enum pumas_property property, enum pumas_scheme scheme, int material, int row, double *value","sig":"const struct pumas_physics *::enum pumas_property::enum pumas_scheme::int::int::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Accessor to the tabulated Physics data.</p>\n","comments":"<p>For a given <code>material</code> and energy loss <code>scheme</code>, this function returns the tabulated data corresponding to the given <code>property</code> column and <code>row</code> index. Each row of the table corresponds to a different kinetic energy value.</p>\n\n<p><strong>Note</strong> that <code>PUMAS_PROPERTY_SCATTERING_LENGTH</code> is not supported since it is not tabulated but computed on the fly.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             Some input index is not valid (property, material or scheme).\n\n PUMAS_RETURN_PHYSICS_ERROR           The Physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_table_length":{"type":"function","file":"pumas.h","line":1173,"lineto":1173,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"Handle for the Physics tables.\n"}],"argline":"const struct pumas_physics *physics","sig":"const struct pumas_physics *","return":{"type":"int","comment":"The number of rows in data tables.\n"},"description":"<p>The depth, i.e. number of kinetic values, of the tabulated data.</p>\n","comments":"","group":"physics"},"pumas_physics_table_index":{"type":"function","file":"pumas.h","line":1205,"lineto":1207,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"Handle for the Physics tables.\n"},{"name":"property","type":"enum pumas_property","comment":"The column index of the property.\n"},{"name":"scheme","type":"enum pumas_scheme","comment":"The energy loss scheme.\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"value","type":"double","comment":"The property value.\n"},{"name":"index","type":"int *","comment":"The row index from below for the given value.\n"}],"argline":"const struct pumas_physics *physics, enum pumas_property property, enum pumas_scheme scheme, int material, double value, int *index","sig":"const struct pumas_physics *::enum pumas_property::enum pumas_scheme::int::double::int *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Compute the table row index for a given property and its value.</p>\n","comments":"<p>In the case of an out of bounds value the closest index value is provided and <code>PUMAS_RETURN_VALUE_ERROR</code> is returned.</p>\n\n<p><strong>Note</strong> that only monotone properties are supported, i.e. where there is at most one solution. Those are: <code>PUMAS_PROPERTY_GRAMMAGE</code>, <code>PUMAS_PROPERTY_KINETIC_ENERGY</code>, <code>PUMAS_PROPERTY_MAGNETIC_ROTATION</code> and <code>PUMAS_PROPERTY_PROPER_TIME</code>.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             Some input index is not valid (property, material or scheme).\n\n PUMAS_RETURN_PHYSICS_ERROR           The Physics is not initialised.\n\n PUMAS_RETURN_VALUE_ERROR             The provided value is out of the table.\n</code></pre>\n","group":"physics"},"pumas_recorder_create":{"type":"function","file":"pumas.h","line":1228,"lineto":1229,"args":[{"name":"recorder","type":"struct pumas_recorder **","comment":"A handle for the recorder.\n"},{"name":"extra_memory","type":"int","comment":"The size of the user extra memory, if any is claimed.\n"}],"argline":"struct pumas_recorder **recorder, int extra_memory","sig":"struct pumas_recorder **::int","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Create a new particle recorder.</p>\n","comments":"<p>Create a new Monte-Carlo particle recorder. The recorder starts configured with a built-in in-memory frame recorder.</p>\n\n<p>If <code>extra_memory</code> is strictly positive the recorder will be extended by <code>extra_memory</code> bytes for user usage. This memory can then be accessed with the <code>user_data</code> field of the returned <code>pumas_recorder</code> structure.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_MEMORY_ERROR    Couldn&#39;t allocate memory.\n</code></pre>\n","group":"recorder"},"pumas_recorder_clear":{"type":"function","file":"pumas.h","line":1238,"lineto":1238,"args":[{"name":"recorder","type":"struct pumas_recorder *","comment":"The recorder handle.\n"}],"argline":"struct pumas_recorder *recorder","sig":"struct pumas_recorder *","return":{"type":"void","comment":null},"description":"<p>Clear all recorded frames.</p>\n","comments":"<p>Erase all recorded states from the recorder and reset the frame count.</p>\n","group":"recorder"},"pumas_recorder_destroy":{"type":"function","file":"pumas.h","line":1248,"lineto":1248,"args":[{"name":"recorder","type":"struct pumas_recorder **","comment":"The recorder handle.\n"}],"argline":"struct pumas_recorder **recorder","sig":"struct pumas_recorder **","return":{"type":"void","comment":null},"description":"<p>Destroy a particle recorder releasing all associated memory.</p>\n","comments":"<p><strong>Note</strong> : The recorder is cleared before beeing destroyed. At return <code>recorder</code> is set to <code>NULL</code>.</p>\n","group":"recorder"},"pumas_memory_allocator":{"type":"function","file":"pumas.h","line":1273,"lineto":1273,"args":[{"name":"allocator","type":"pumas_allocate_cb *","comment":"The user supplied memory allocator, or <code>NULL</code>.\n"}],"argline":"pumas_allocate_cb *allocator","sig":"pumas_allocate_cb *","return":{"type":"void","comment":null},"description":"<p>Set the memory allocation function for the PUMAS library.</p>\n","comments":"<p>This function allows to specify a custom memory allocation function for PUMAS. Passing a <code>NULL</code> value results in PUMAS using its default allocator, i.e. <code>malloc</code>.</p>\n\n<p><strong>Warnings</strong></p>\n\n<p>This function is <strong>not</strong> thread safe.</p>\n","group":"memory"},"pumas_memory_reallocator":{"type":"function","file":"pumas.h","line":1299,"lineto":1299,"args":[{"name":"reallocator","type":"pumas_reallocate_cb *","comment":"The user supplied memory reallocator, or <code>NULL</code>.\n"}],"argline":"pumas_reallocate_cb *reallocator","sig":"pumas_reallocate_cb *","return":{"type":"void","comment":null},"description":"<p>Set the memory re-allocation function for the PUMAS library.</p>\n","comments":"<p>This function allows to specify a custom memory re-allocation function for PUMAS. Passing a <code>NULL</code> value results in PUMAS using its default reallocator, i.e. <code>realloc</code>.</p>\n\n<p><strong>Warnings</strong></p>\n\n<p>This function is <strong>not</strong> thread safe.</p>\n","group":"memory"},"pumas_memory_deallocator":{"type":"function","file":"pumas.h","line":1323,"lineto":1323,"args":[{"name":"deallocator","type":"pumas_deallocate_cb *","comment":"The user supplied memory deallocator, or <code>NULL</code>.\n"}],"argline":"pumas_deallocate_cb *deallocator","sig":"pumas_deallocate_cb *","return":{"type":"void","comment":null},"description":"<p>Set the memory deallocation function for the PUMAS library.</p>\n","comments":"<p>This function allows to specify a custom memory deallocation function for PUMAS. Passing a <code>NULL</code> value results in PUMAS using its default deallocator, i.e. <code>free</code>.</p>\n\n<p><strong>Warnings</strong></p>\n\n<p>This function is <strong>not</strong> thread safe.</p>\n","group":"memory"},"pumas_physics_tabulate":{"type":"function","file":"pumas.h","line":1442,"lineto":1444,"args":[{"name":"physics","type":"struct pumas_physics *","comment":"Handle for the Physics tables.\n"},{"name":"data","type":"struct pumas_physics_tabulation_data *","comment":"The tabulation settings.\n"}],"argline":"struct pumas_physics *physics, struct pumas_physics_tabulation_data *data","sig":"struct pumas_physics *::struct pumas_physics_tabulation_data *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Tabulate the energy loss for the given material and set of energies.</p>\n","comments":"<p>This function allows to generate an energy loss file for a given material and a set of kinetic energy values. <strong>Note</strong> that the Physics must have been initialised with the <code>pumas_physics_create_tabulation</code> function. The material atomic composition is specified by the MDF provided at initialisation. Additional Physical properties can be specified by filling the input <em>data</em> structure.</p>\n\n<p><strong>Warnings</strong></p>\n\n<p>This function is <strong>not</strong> thread safe.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_IO_ERROR        The output file already exists.\n\n PUMAS_RETURN_MEMORY_ERROR    Some memory couldn&#39;t be allocated.\n\n PUMAS_RETURN_PATH_ERROR      The output file could not be created.\n</code></pre>\n","group":"physics"},"pumas_physics_tabulation_clear":{"type":"function","file":"pumas.h","line":1458,"lineto":1460,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":null},{"name":"data","type":"struct pumas_physics_tabulation_data *","comment":"The tabulation data.\n"}],"argline":"const struct pumas_physics *physics, struct pumas_physics_tabulation_data *data","sig":"const struct pumas_physics *::struct pumas_physics_tabulation_data *","return":{"type":"void","comment":null},"description":"<p>Clear the temporary memory used for the tabulation of materials.</p>\n","comments":"<p>This function allows to clear any temporary memory allocated by the <code>pumas_physics_tabulate</code> function.</p>\n\n<p><strong>Warnings</strong></p>\n\n<p>This function is <strong>not</strong> thread safe.</p>\n","group":"physics"},"pumas_physics_create_tabulation":{"type":"function","file":"pumas.h","line":1515,"lineto":1517,"args":[{"name":"physics","type":"struct pumas_physics **","comment":"Handle for the Physics tables.\n"},{"name":"particle","type":"enum pumas_particle","comment":"The type of the particle to transport.\n"},{"name":"mdf_path","type":"const char *","comment":"The path to a Material Description File (MDF) or <code>NULL</code>.\n"}],"argline":"struct pumas_physics **physics, enum pumas_particle particle, const char *mdf_path","sig":"struct pumas_physics **::enum pumas_particle::const char *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Initialise the Physics in tabulation mode.</p>\n","comments":"<p>Initialise the Physics tables in reduced mode using a MDF. The materials data are not loaded. This mode is not suitable for particle&#39;s transport. It is meant for pre-computation of the material tables using the <code>pumas_physics_tabulate</code> function. <strong>Note</strong> that <em>mdf_path</em> can be <code>NULL</code> Then it is read from the <code>PUMAS_MDF</code> environment variable.</p>\n\n<p>Call <code>pumas_physics_destroy</code> in order to unload the Physics and release allocated memory. <strong>Note</strong> that in addition any temporary memory allocated by <code>pumas_physics_tabulate</code> must be explictly freed by calling the <code>pumas_physics_tabulation_clear</code> function.</p>\n\n<p><strong>Warnings</strong> : this function is not thread safe.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_END_OF_FILE             And unexpected EOF occured.\n\n PUMAS_RETURN_FORMAT_ERROR            A file has a wrong format.\n\n PUMAS_RETURN_INCOMPLETE_FILE         There are missing entries in the MDF.\n\n PUMAS_RETURN_IO_ERROR                A file couldn&#39;t be read.\n\n PUMAS_RETURN_MEMORY_ERROR            Couldn&#39;t allocate memory.\n\n PUMAS_RETURN_PATH_ERROR              A file couldn&#39;t be opened.\n\n PUMAS_RETURN_PHYSICS_ERROR           A `NULL` physics pointer was provided.\n\n PUMAS_RETURN_TOO_LONG                Some XML node in the MDF is too long.\n\n PUMAS_RETURN_UNDEFINED_MDF           No MDF was provided.\n\n PUMAS_RETURN_UNKNOWN_ELEMENT         An element in the MDF wasn&#39;t defined.\n\n PUMAS_RETURN_UNKNOWN_MATERIAL        An material in the MDF wasn&#39;t defined.\n\n PUMAS_RETURN_UNKNOWN_PARTICLE        The given type is not supported.\n</code></pre>\n","group":"physics"}},"callbacks":{"pumas_locals_cb":{"type":"callback","file":"pumas.h","line":257,"lineto":258,"args":[{"name":"medium","type":"struct pumas_medium *","comment":"The propagation medium.\n"},{"name":"state","type":"struct pumas_state *","comment":"The Monte-Carlo state for which the local properties are\n                  requested.\n"},{"name":"locals","type":"struct pumas_locals *","comment":"A pointer to a <code>pumas_locals</code> structure to update.\n"}],"argline":"struct pumas_medium *medium, struct pumas_state *state, struct pumas_locals *locals","sig":"struct pumas_medium *::struct pumas_state *::struct pumas_locals *","return":{"type":"double","comment":"A local stepping limit.\n"},"description":"<p>Callback for setting the local properties of a propagation medium.</p>\n","comments":"<p>The callback must return a proposed Monte-Carlo stepping distance, in m, consistent with the size of the propagation medium inhomogeneities, e. g. 1 % of ρ / |∇ ρ|. Note that returning zero or less signs that the propagation medium is fully uniform.</p>\n\n<p><strong>Warning</strong> : it is an error to return zero or less for any position of the medium if at least one area is not uniform. Instead one should use two different media even though they have the same material base.</p>\n"},"pumas_recorder_cb":{"type":"callback","file":"pumas.h","line":310,"lineto":312,"args":[{"name":"context","type":"struct pumas_context *","comment":"The recording simulation context.\n"},{"name":"state","type":"struct pumas_state *","comment":"The recorded particle state.\n"},{"name":"medium","type":"struct pumas_medium *","comment":"The corresponding medium.\n"},{"name":"event","type":"enum pumas_event","comment":"The step event.\n"}],"argline":"struct pumas_context *context, struct pumas_state *state, struct pumas_medium *medium, enum pumas_event event","sig":"struct pumas_context *::struct pumas_state *::struct pumas_medium *::enum pumas_event","return":{"type":"void","comment":null},"description":"<p>A user supplied recorder callback.</p>\n","comments":"<p>This callback allows to customize the recording of PUMAS Monte-Carlo events.</p>\n\n<p><strong>Note</strong> : by default the recorder uses an in-memory copy with dynamic allocation. Setting a custom recorder disables the default recording.</p>\n"},"pumas_medium_cb":{"type":"callback","file":"pumas.h","line":382,"lineto":384,"args":[{"name":"context","type":"struct pumas_context *","comment":"The Monte-Carlo context requiring a medium.\n"},{"name":"state","type":"struct pumas_state *","comment":"The Monte-Carlo state for which the medium is requested.\n"},{"name":"medium","type":"struct pumas_medium **","comment":"A pointer to store the medium or <code>NULL</code> if not requested.\n"},{"name":"step","type":"double *","comment":"The proposed step size or zero or less for an infinite\n                    medium. If not requested this points to <code>NULL</code>.\n"}],"argline":"struct pumas_context *context, struct pumas_state *state, struct pumas_medium **medium, double *step","sig":"struct pumas_context *::struct pumas_state *::struct pumas_medium **::double *","return":{"type":"enum pumas_step","comment":"If the proposed step size is guaranteed to lie on the boundary of\n the current medium then <code>PUMAS_STEP_EXACT</code> can be returned otherwise\n <code>PUMAS_STEP_APPROXIMATE</code> must be returned.\n"},"description":"<p>Callback for locating the propagation medium of a <code>pumas_state</code>.</p>\n","comments":"<p>If <em>step</em> is not <code>NULL</code>, this callback must propose a Monte-Carlo stepping distance, in m, consistent with the geometry. Note that returning zero or less signs that the corresponding medium has no boundaries. When <em>medium</em> is not <code>NULL</code> it must be set to the located <code>pumas_medium</code>.</p>\n\n<p><strong>Warning</strong> : it is an error to return zero or less for any state if the extension is finite.</p>\n"},"pumas_function_t":{"type":"callback","file":"pumas.h","line":392,"lineto":392,"args":[],"argline":"","sig":"","return":{"type":"void","comment":null},"description":"<p>Generic function pointer.</p>\n","comments":"<p>This is a generic function pointer used to identify the library functions, e.g. for error handling.</p>\n"},"pumas_handler_cb":{"type":"callback","file":"pumas.h","line":404,"lineto":405,"args":[{"name":"rc","type":"enum pumas_return","comment":"The PUMAS return code.\n"},{"name":"caller","type":"pumas_function_t *","comment":"The API function where the error occured.\n"},{"name":"message","type":"const char *","comment":"Brief description of the error.\n"}],"argline":"enum pumas_return rc, pumas_function_t *caller, const char *message","sig":"enum pumas_return::pumas_function_t *::const char *","return":{"type":"void","comment":null},"description":"<p>Callback for error handling.</p>\n","comments":"<p>The user can provide its own error handler. It will be called at the return of any PUMAS library function providing an error code.</p>\n"},"pumas_random_cb":{"type":"callback","file":"pumas.h","line":420,"lineto":420,"args":[{"name":"context","type":"struct pumas_context *","comment":"The simulation context requiring a random number.\n"}],"argline":"struct pumas_context *context","sig":"struct pumas_context *","return":{"type":"double","comment":"A uniform pseudo random number in [0;1].\n"},"description":"<p>Callback providing a stream of pseudo random numbers.</p>\n","comments":"<p><strong>Note</strong> : this is the only random stream used by PUMAS. The user must unsure proper behaviour, i.e. that a flat distribution in [0;1] is indeed returned.</p>\n\n<p><strong>Warning</strong> : if multiple contexts are used the user must ensure that this callback is thread safe, e.g. by using independant streams for each context or a locking mechanism in order to share a single random stream.</p>\n"},"pumas_allocate_cb":{"type":"callback","file":"pumas.h","line":1258,"lineto":1258,"args":[{"name":"size","type":"int","comment":"The number of memory bytes to allocate.\n"}],"argline":"int size","sig":"int","return":{"type":"void *","comment":"The address of the allocated memory or <code>NULL</code> in case of faillure.\n"},"description":"<p>User supplied callback for memory allocation.</p>\n","comments":"<p>The provided callback must conform to the <code>malloc</code> semantic and behaviour.</p>\n"},"pumas_reallocate_cb":{"type":"callback","file":"pumas.h","line":1284,"lineto":1284,"args":[{"name":"ptr","type":"void *","comment":"The address of the memory to reallocate.\n"},{"name":"size","type":"int","comment":"The number of memory bytes requested for the reallocation.\n"}],"argline":"void *ptr, int size","sig":"void *::int","return":{"type":"void *","comment":"The address of the re-allocated memory or <code>NULL</code> in case of faillure.\n"},"description":"<p>User supplied callback for memory re-allocation.</p>\n","comments":"<p>The provided callback must conform to the <code>realloc</code> semantic and behaviour.</p>\n"},"pumas_deallocate_cb":{"type":"callback","file":"pumas.h","line":1308,"lineto":1308,"args":[{"name":"ptr","type":"void *","comment":null}],"argline":"void *ptr","sig":"void *","return":{"type":"void","comment":null},"description":"<p>User supplied callback for memory deallocation.</p>\n","comments":"<p>The provided callback must conform to the <code>free</code> semantic and behaviour.</p>\n"}},"globals":{},"types":[["pumas_context",{"decl":["pumas_medium_cb * medium","pumas_random_cb * random","struct pumas_recorder * recorder","void * user_data","int longitudinal","int forward","enum pumas_scheme scheme","enum pumas_decay decay","enum pumas_event event","double kinetic_limit","double distance_max","double grammage_max","double time_max"],"type":"struct","value":"pumas_context","file":"pumas.h","line":440,"lineto":489,"tdef":null,"description":" A handle for a simulation stream.","comments":"<p>This structure is a proxy to thread specific data for a simulation stream. It exposes some public data that the user may configure or alter directly. However, it also encloses other opaque data. Therefore, it <strong>must</strong> be initialised and released with the <code>pumas_context</code> functions.</p>\n\n<ul>\n<li><p>The <code>medium</code> field must be set after any initialisation with <code>pumas_context_create</code> and prior to any call to <code>pumas_transport</code>.</p></li>\n<li><p>Depending on the level of detail of the simulation a random stream must be provided by the user before any call to <code>pumas_transport</code>.</p></li>\n<li><p>Note that for <code>kinetic_limit</code>, <code>distance_max</code>, <code>grammage_max</code> or <code>time_max</code> to be taken into account, the corresponding events must be activated as well, with the <code>event</code> flag.</p></li>\n</ul>\n","fields":[{"type":"pumas_medium_cb *","name":"medium","comments":"A medium callback. \n"},{"type":"pumas_random_cb *","name":"random","comments":"The pseudo random generator callback. \n"},{"type":"struct pumas_recorder *","name":"recorder","comments":"A <code>pumas_frame</code> recorder. \n"},{"type":"void *","name":"user_data","comments":"A pointer to additional memory, if any is requested at\n initialisation.\n"},{"type":"int","name":"longitudinal","comments":"Flag to enable or disable transverse transport. Default is <code>0</code>,\n i.e. transverse transport is enabled.\n"},{"type":"int","name":"forward","comments":"Flag to switch between forward and reverse transport. Default is\n <code>1</code>, i.e. forward Monte-Carlo.\n"},{"type":"enum pumas_scheme","name":"scheme","comments":"The scheme used for the computation of energy losses. Default is\n <code>PUMAS_SCHEME_DETAILED</code>.\n"},{"type":"enum pumas_decay","name":"decay","comments":"The mode for handling decays. Default is <code>PUMAS_DECAY_WEIGHT</code> for\n a muon or <code>PUMAS_DECAY_PROCESS</code> for a tau.\n"},{"type":"enum pumas_event","name":"event","comments":"The events that might stop the transport. Default is\n <code>PUMAS_EVENT_NONE</code>, i.e. the transport stops only if the particle\n exits the simulation media, or if it looses all of its energy.\n"},{"type":"double","name":"kinetic_limit","comments":"The minimum kinetic energy for forward transport, or maximum one\n for backward transport, in GeV.\n"},{"type":"double","name":"distance_max","comments":"The maximum travelled distance, in m. \n"},{"type":"double","name":"grammage_max","comments":"The maximum travelled grammage, in kg / m<sup>2.</sup> \n"},{"type":"double","name":"time_max","comments":"The maximum travelled proper time, in m. \n"}],"block":"pumas_medium_cb * medium\npumas_random_cb * random\nstruct pumas_recorder * recorder\nvoid * user_data\nint longitudinal\nint forward\nenum pumas_scheme scheme\nenum pumas_decay decay\nenum pumas_event event\ndouble kinetic_limit\ndouble distance_max\ndouble grammage_max\ndouble time_max","used":{"returns":[],"needs":["pumas_context_create","pumas_context_destroy","pumas_context_physics_get","pumas_context_transport","pumas_medium_cb","pumas_random_cb","pumas_recorder_cb"]}}],["pumas_decay",{"decl":["PUMAS_DECAY_NONE","PUMAS_DECAY_WEIGHT","PUMAS_DECAY_PROCESS"],"type":"enum","file":"pumas.h","line":96,"lineto":108,"block":"PUMAS_DECAY_NONE\nPUMAS_DECAY_WEIGHT\nPUMAS_DECAY_PROCESS","tdef":null,"description":" Modes for handling particle decays.","comments":"","fields":[{"type":"int","name":"PUMAS_DECAY_NONE","comments":"<p>Decays are disabled. </p>\n","value":0},{"type":"int","name":"PUMAS_DECAY_WEIGHT","comments":"<p>Decays are accounted for by a weight factor. This is efficient\n for muons but irrelevant -numerically instable- for the forward\n transport of taus since they decay in flight. Hence it is\n disabled in the latter case.</p>\n","value":1},{"type":"int","name":"PUMAS_DECAY_PROCESS","comments":"<p>Decays are enabled as a specific Monte-Carlo process. </p>\n","value":2}],"used":{"returns":[],"needs":[]}}],["pumas_event",{"decl":["PUMAS_EVENT_NONE","PUMAS_EVENT_LIMIT_KINETIC","PUMAS_EVENT_LIMIT_DISTANCE","PUMAS_EVENT_LIMIT_GRAMMAGE","PUMAS_EVENT_LIMIT_TIME","PUMAS_EVENT_LIMIT","PUMAS_EVENT_MEDIUM","PUMAS_EVENT_VERTEX_BREMSSTRAHLUNG","PUMAS_EVENT_VERTEX_PAIR_CREATION","PUMAS_EVENT_VERTEX_PHOTONUCLEAR","PUMAS_EVENT_VERTEX_DELTA_RAY","PUMAS_EVENT_VERTEX_DEL","PUMAS_EVENT_VERTEX_COULOMB","PUMAS_EVENT_VERTEX_DECAY","PUMAS_EVENT_VERTEX","PUMAS_EVENT_WEIGHT","PUMAS_EVENT_START","PUMAS_EVENT_STOP"],"type":"enum","file":"pumas.h","line":163,"lineto":200,"block":"PUMAS_EVENT_NONE\nPUMAS_EVENT_LIMIT_KINETIC\nPUMAS_EVENT_LIMIT_DISTANCE\nPUMAS_EVENT_LIMIT_GRAMMAGE\nPUMAS_EVENT_LIMIT_TIME\nPUMAS_EVENT_LIMIT\nPUMAS_EVENT_MEDIUM\nPUMAS_EVENT_VERTEX_BREMSSTRAHLUNG\nPUMAS_EVENT_VERTEX_PAIR_CREATION\nPUMAS_EVENT_VERTEX_PHOTONUCLEAR\nPUMAS_EVENT_VERTEX_DELTA_RAY\nPUMAS_EVENT_VERTEX_DEL\nPUMAS_EVENT_VERTEX_COULOMB\nPUMAS_EVENT_VERTEX_DECAY\nPUMAS_EVENT_VERTEX\nPUMAS_EVENT_WEIGHT\nPUMAS_EVENT_START\nPUMAS_EVENT_STOP","tdef":null,"description":" Flags for transport events. ","comments":"","fields":[{"type":"int","name":"PUMAS_EVENT_NONE","comments":"<p>No event occured or is foreseen. </p>\n","value":0},{"type":"int","name":"PUMAS_EVENT_LIMIT_KINETIC","comments":"<p>A kinetic limit was reached or is foreseen. </p>\n","value":1},{"type":"int","name":"PUMAS_EVENT_LIMIT_DISTANCE","comments":"<p>A distance limit was reached or is foreseen. </p>\n","value":2},{"type":"int","name":"PUMAS_EVENT_LIMIT_GRAMMAGE","comments":"<p>A grammage limit was reached or is foreseen. </p>\n","value":4},{"type":"int","name":"PUMAS_EVENT_LIMIT_TIME","comments":"<p>A proper time limit was reached or is foreseen. </p>\n","value":8},{"type":"int","name":"PUMAS_EVENT_LIMIT","comments":"<p>Shortcut for any external limit. </p>\n","value":15},{"type":"int","name":"PUMAS_EVENT_MEDIUM","comments":"<p>A change of medium occured or is foreseen. </p>\n","value":16},{"type":"int","name":"PUMAS_EVENT_VERTEX_BREMSSTRAHLUNG","comments":"<p>A Bremsstrahlung occured or is foreseen. </p>\n","value":32},{"type":"int","name":"PUMAS_EVENT_VERTEX_PAIR_CREATION","comments":"<p>A Pair creation occured or is foreseen. </p>\n","value":64},{"type":"int","name":"PUMAS_EVENT_VERTEX_PHOTONUCLEAR","comments":"<p>A Photonuclear interaction occured or is foreseen. </p>\n","value":128},{"type":"int","name":"PUMAS_EVENT_VERTEX_DELTA_RAY","comments":"<p>A Delta ray occured or is foreseen. </p>\n","value":256},{"type":"int","name":"PUMAS_EVENT_VERTEX_DEL","comments":"<p>Shortcut for any Discrete Energy Loss (DEL). </p>\n","value":480},{"type":"int","name":"PUMAS_EVENT_VERTEX_COULOMB","comments":"<p>A hard Coulombian interaction occured or is foreseen. </p>\n","value":512},{"type":"int","name":"PUMAS_EVENT_VERTEX_DECAY","comments":"<p>A decay has occured or is foreseen. </p>\n","value":1024},{"type":"int","name":"PUMAS_EVENT_VERTEX","comments":"<p>Shortcut for any interaction vertex. </p>\n","value":2016},{"type":"int","name":"PUMAS_EVENT_WEIGHT","comments":"<p>The particle has a nul or negative weight. </p>\n","value":2048},{"type":"int","name":"PUMAS_EVENT_START","comments":"<p>Extra flag for records tagging the 1st transport step. </p>\n","value":4096},{"type":"int","name":"PUMAS_EVENT_STOP","comments":"<p>Extra flag for records tagging the last transport step. </p>\n","value":8192}],"used":{"returns":[],"needs":["pumas_context_transport","pumas_recorder_cb"]}}],["pumas_frame",{"decl":["struct pumas_state state","struct pumas_medium * medium","enum pumas_event event","struct pumas_frame * next"],"type":"struct","value":"pumas_frame","file":"pumas.h","line":287,"lineto":296,"block":"struct pumas_state state\nstruct pumas_medium * medium\nenum pumas_event event\nstruct pumas_frame * next","tdef":null,"description":" A handle to a recorded Monte-Carlo frame.","comments":"<p>This structure exposes data relative to a recorded frame. It is not meant to be modified by the user.</p>\n","fields":[{"type":"struct pumas_state","name":"state","comments":"The recorded state. \n"},{"type":"struct pumas_medium *","name":"medium","comments":"The corresponding propagation medium. \n"},{"type":"enum pumas_event","name":"event","comments":"The corresponding step event. \n"},{"type":"struct pumas_frame *","name":"next","comments":"Link to the next frame in the record. \n"}],"used":{"returns":[],"needs":[]}}],["pumas_locals",{"decl":["double density","double [3] magnet"],"type":"struct","value":"pumas_locals","file":"pumas.h","line":230,"lineto":235,"block":"double density\ndouble [3] magnet","tdef":null,"description":" The local properties of a propagation medium.","comments":"","fields":[{"type":"double","name":"density","comments":"The material local density, in kg/m<sup>3.</sup> \n"},{"type":"double [3]","name":"magnet","comments":"The local magnetic field components, in T. \n"}],"used":{"returns":[],"needs":["pumas_locals_cb"]}}],["pumas_medium",{"decl":["int material","pumas_locals_cb * locals"],"type":"struct","value":"pumas_medium","file":"pumas.h","line":269,"lineto":280,"tdef":null,"description":" Description of a propagation medium.","comments":"<p>A propagation medium is fully defined by:</p>\n\n<ul>\n<li>a <code>material</code> composition with a uniform relative content. - <code>pumas_locals</code> properties set by a user provided <code>pumas_locals_cb</code> callback.</li>\n</ul>\n","fields":[{"type":"int","name":"material","comments":"The material index in the Material Description File (MDF). It can\n be mapped to the corresponding name with the <code>pumas_material_</code>\n functions.\n"},{"type":"pumas_locals_cb *","name":"locals","comments":"The user supplied callback for setting the medium local properties.\n"}],"block":"int material\npumas_locals_cb * locals","used":{"returns":[],"needs":["pumas_context_transport","pumas_locals_cb","pumas_medium_cb","pumas_recorder_cb"]}}],["pumas_particle",{"decl":["PUMAS_PARTICLE_MUON","PUMAS_PARTICLE_TAU"],"type":"enum","file":"pumas.h","line":40,"lineto":45,"block":"PUMAS_PARTICLE_MUON\nPUMAS_PARTICLE_TAU","tdef":null,"description":" Particle types supported by the PUMAS transport engine.","comments":"","fields":[{"type":"int","name":"PUMAS_PARTICLE_MUON","comments":"<p>The muon or anti-muon lepton. </p>\n","value":0},{"type":"int","name":"PUMAS_PARTICLE_TAU","comments":"<p>The tau or anti-tau lepton. </p>\n","value":1}],"used":{"returns":[],"needs":["pumas_physics_create","pumas_physics_create_tabulation","pumas_physics_particle"]}}],["pumas_physics",{"decl":[],"type":"struct","value":"pumas_physics","file":"pumas.h","line":494,"lineto":494,"tdef":null,"description":" Opaque handle for Physics tables","comments":"","fields":[],"used":{"returns":["pumas_context_physics_get"],"needs":["pumas_context_create","pumas_physics_composite_length","pumas_physics_composite_properties","pumas_physics_composite_update","pumas_physics_create","pumas_physics_create_tabulation","pumas_physics_destroy","pumas_physics_dump","pumas_physics_load","pumas_physics_material_index","pumas_physics_material_length","pumas_physics_material_name","pumas_physics_particle","pumas_physics_print","pumas_physics_property_cross_section","pumas_physics_property_energy_loss","pumas_physics_property_grammage","pumas_physics_property_kinetic_energy","pumas_physics_property_magnetic_rotation","pumas_physics_property_proper_time","pumas_physics_property_scattering_length","pumas_physics_table_index","pumas_physics_table_length","pumas_physics_table_value","pumas_physics_tabulate","pumas_physics_tabulation_clear"]}}],["pumas_physics_element",{"decl":["struct pumas_physics_element * prev","struct pumas_physics_element * next","int index","double fraction"],"type":"struct","value":"pumas_physics_element","file":"pumas.h","line":1345,"lineto":1354,"block":"struct pumas_physics_element * prev\nstruct pumas_physics_element * next\nint index\ndouble fraction","tdef":null,"description":" Handle for an atomic element within a material.","comments":"<p>This structure is a proxy exposing some data of an atomic element within the material last processed by <code>pumas_tabulation_tabulate</code>.</p>\n","fields":[{"type":"struct pumas_physics_element *","name":"prev","comments":"Linked list pointer to the previous element. \n"},{"type":"struct pumas_physics_element *","name":"next","comments":"Linked list pointer to the next element. \n"},{"type":"int","name":"index","comments":"The element index. \n"},{"type":"double","name":"fraction","comments":"The mass fraction of the element in the current material. \n"}],"used":{"returns":[],"needs":[]}}],["pumas_physics_material",{"decl":["int index","double density","double I","enum pumas_physics_state state","double a","double k","double x0","double x1","double Cbar","double delta0"],"type":"struct","value":"pumas_physics_material","file":"pumas.h","line":1368,"lineto":1389,"block":"int index\ndouble density\ndouble I\nenum pumas_physics_state state\ndouble a\ndouble k\ndouble x0\ndouble x1\ndouble Cbar\ndouble delta0","tdef":null,"description":" Description of a base material to tabulate.","comments":"<p>This structure allows to specify the physical properties of a base material in order to tabulate its energy loss using the <code>pumas_physics_tabulate</code> function.</p>\n\n<p><strong>Note</strong> that the material index <em>must</em> be set, e.g. using the <code>pumas_physics_material_index</code> function. If the Sternheimer coefficients are not explicitly provided there are computed from the density using the Sternheimer and Peierls recipe.</p>\n","fields":[{"type":"int","name":"index","comments":"The material index. \n"},{"type":"double","name":"density","comments":"The material density. \n"},{"type":"double","name":"I","comments":"The mean excitation energy. \n"},{"type":"enum pumas_physics_state","name":"state","comments":"The material state. \n"},{"type":"double","name":"a","comments":"Sternheimer <em>a</em> Coefficient. \n"},{"type":"double","name":"k","comments":"Sternheimer <em>k</em> Coefficient. \n"},{"type":"double","name":"x0","comments":"Sternheimer <em>x0</em> Coefficient. \n"},{"type":"double","name":"x1","comments":"Sternheimer <em>x1</em> Coefficient. \n"},{"type":"double","name":"Cbar","comments":"Sternheimer <em>Cbar</em> Coefficient. \n"},{"type":"double","name":"delta0","comments":"Sternheimer <em>delta0</em> Coefficient. \n"}],"used":{"returns":[],"needs":[]}}],["pumas_physics_state",{"decl":["PUMAS_PHYSICS_STATE_UNKNOWN","PUMAS_PHYSICS_STATE_SOLID","PUMAS_PHYSICS_STATE_LIQUID","PUMAS_PHYSICS_STATE_GAZ","PUMAS_PHYSICS_N_STATES"],"type":"enum","file":"pumas.h","line":1326,"lineto":1337,"block":"PUMAS_PHYSICS_STATE_UNKNOWN\nPUMAS_PHYSICS_STATE_SOLID\nPUMAS_PHYSICS_STATE_LIQUID\nPUMAS_PHYSICS_STATE_GAZ\nPUMAS_PHYSICS_N_STATES","tdef":null,"description":" Physical states of materials. ","comments":"","fields":[{"type":"int","name":"PUMAS_PHYSICS_STATE_UNKNOWN","comments":"<p>Undefined physical state. </p>\n","value":0},{"type":"int","name":"PUMAS_PHYSICS_STATE_SOLID","comments":"<p>Solid physical state. </p>\n","value":1},{"type":"int","name":"PUMAS_PHYSICS_STATE_LIQUID","comments":"<p>Liquid physical state. </p>\n","value":2},{"type":"int","name":"PUMAS_PHYSICS_STATE_GAZ","comments":"<p>Gaz physical state. </p>\n","value":3},{"type":"int","name":"PUMAS_PHYSICS_N_STATES","comments":"<p>The number of physical states. </p>\n","value":4}],"used":{"returns":[],"needs":[]}}],["pumas_physics_tabulation_data",{"decl":["int n_kinetics","double * kinetic","int overwrite","char * outdir","struct pumas_physics_material material","char * path","struct pumas_physics_element * elements"],"type":"struct","value":"pumas_physics_tabulation_data","file":"pumas.h","line":1397,"lineto":1412,"block":"int n_kinetics\ndouble * kinetic\nint overwrite\nchar * outdir\nstruct pumas_physics_material material\nchar * path\nstruct pumas_physics_element * elements","tdef":null,"description":" Handle for tabulation data.","comments":"<p>This structure gathers data required for tabulating the energy loss of materials with the <code>pumas_physics_tabulate</code> function.</p>\n","fields":[{"type":"int","name":"n_kinetics","comments":"The number of kinetic energy values to tabulate. \n"},{"type":"double *","name":"kinetic","comments":"Array of kinetic energy values to tabulate. \n"},{"type":"int","name":"overwrite","comments":"Flag to enable overwriting an existing energy loss file. \n"},{"type":"char *","name":"outdir","comments":"Path to a directory where the tabulation should be written. \n"},{"type":"struct pumas_physics_material","name":"material","comments":"Properties of the material to tabulate \n"},{"type":"char *","name":"path","comments":"Path to the energy loss file of the last tabulated material. \n"},{"type":"struct pumas_physics_element *","name":"elements","comments":"List of atomic elements contained in the tabulated material(s). \n"}],"used":{"returns":[],"needs":["pumas_physics_tabulate","pumas_physics_tabulation_clear"]}}],["pumas_property",{"decl":["PUMAS_PROPERTY_CROSS_SECTION","PUMAS_PROPERTY_ENERGY_LOSS","PUMAS_PROPERTY_GRAMMAGE","PUMAS_PROPERTY_KINETIC_ENERGY","PUMAS_PROPERTY_MAGNETIC_ROTATION","PUMAS_PROPERTY_PROPER_TIME","PUMAS_PROPERTY_SCATTERING_LENGTH"],"type":"enum","file":"pumas.h","line":50,"lineto":66,"block":"PUMAS_PROPERTY_CROSS_SECTION\nPUMAS_PROPERTY_ENERGY_LOSS\nPUMAS_PROPERTY_GRAMMAGE\nPUMAS_PROPERTY_KINETIC_ENERGY\nPUMAS_PROPERTY_MAGNETIC_ROTATION\nPUMAS_PROPERTY_PROPER_TIME\nPUMAS_PROPERTY_SCATTERING_LENGTH","tdef":null,"description":" Keys for some of the tabulated properties used by PUMAS.","comments":"","fields":[{"type":"int","name":"PUMAS_PROPERTY_CROSS_SECTION","comments":"<p>The macroscopic inelastic cross-section, in m<sup>2</sup>/kg. </p>\n","value":0},{"type":"int","name":"PUMAS_PROPERTY_ENERGY_LOSS","comments":"<p>The average energy loss, in GeV/(kg/m<sup>2</sup>). </p>\n","value":1},{"type":"int","name":"PUMAS_PROPERTY_GRAMMAGE","comments":"<p>The particle range, in kg/m<sup>2</sup>. </p>\n","value":2},{"type":"int","name":"PUMAS_PROPERTY_KINETIC_ENERGY","comments":"<p>The particle kinetic energy, in GeV. </p>\n","value":3},{"type":"int","name":"PUMAS_PROPERTY_MAGNETIC_ROTATION","comments":"<p>The total magnetic rotation angle, in rad kg/m<sup>3</sup>. </p>\n","value":4},{"type":"int","name":"PUMAS_PROPERTY_PROPER_TIME","comments":"<p>The particle proper time, in kg/m<sup>2</sup>. </p>\n","value":5},{"type":"int","name":"PUMAS_PROPERTY_SCATTERING_LENGTH","comments":"<p>The macroscopic elastic scattering 1<sup>st</sup> path length, in kg/m<sup>2</sup>.</p>\n","value":6}],"used":{"returns":[],"needs":["pumas_physics_table_index","pumas_physics_table_value"]}}],["pumas_recorder",{"decl":["struct pumas_frame * first","int length","int period","pumas_recorder_cb * record","void * user_data"],"type":"struct","value":"pumas_recorder","file":"pumas.h","line":326,"lineto":352,"block":"struct pumas_frame * first\nint length\nint period\npumas_recorder_cb * record\nvoid * user_data","tdef":null,"description":" A handle for recording Monte-Carlo frames.","comments":"<p>This structure is a proxy for recording Monte-Carlo states and/or accessing them. Although it exposes some public data that the user may alter it also encloses other opaque data. Therefore, it <strong>must</strong> be handled with the <code>pumas_recorder</code> functions.</p>\n\n<p><strong>Note</strong> : in order to enable or disable a recorder it is enough to link or unlink it from the <code>recorder</code> field of any <code>pumas_context</code>. Only the corresponding context will be recorded.</p>\n","fields":[{"type":"struct pumas_frame *","name":"first","comments":"Link to the 1<sup>st</sup> recorded frame or <code>NULL</code> if none. This field\n should not be modified.\n"},{"type":"int","name":"length","comments":"The total number of recorded frames. This field should not be\n modified.\n"},{"type":"int","name":"period","comments":"The sampling period of the recorder, If set to zero or less only\n medium changes are recorded. Defaults to 1, i.e. all Monte-Carlo\n steps are recorded.\n"},{"type":"pumas_recorder_cb *","name":"record","comments":"Link to an external (user supplied) recording callback. Note that\n setting this value disables the in-memory frame recording. Defaults\n to <code>NULL</code>.\n"},{"type":"void *","name":"user_data","comments":"A pointer to additional memory, if any is requested at\n initialisation.\n"}],"used":{"returns":[],"needs":["pumas_recorder_clear","pumas_recorder_create","pumas_recorder_destroy"]}}],["pumas_return",{"decl":["PUMAS_RETURN_SUCCESS","PUMAS_RETURN_END_OF_FILE","PUMAS_RETURN_DECAY_ERROR","PUMAS_RETURN_DENSITY_ERROR","PUMAS_RETURN_INCOMPLETE_FILE","PUMAS_RETURN_INDEX_ERROR","PUMAS_RETURN_PHYSICS_ERROR","PUMAS_RETURN_INTERNAL_ERROR","PUMAS_RETURN_IO_ERROR","PUMAS_RETURN_FORMAT_ERROR","PUMAS_RETURN_MEDIUM_ERROR","PUMAS_RETURN_MEMORY_ERROR","PUMAS_RETURN_MISSING_LIMIT","PUMAS_RETURN_MISSING_RANDOM","PUMAS_RETURN_PATH_ERROR","PUMAS_RETURN_RAISE_ERROR","PUMAS_RETURN_TOO_LONG","PUMAS_RETURN_UNDEFINED_DEDX","PUMAS_RETURN_UNDEFINED_MDF","PUMAS_RETURN_UNKNOWN_ELEMENT","PUMAS_RETURN_UNKNOWN_MATERIAL","PUMAS_RETURN_UNKNOWN_PARTICLE","PUMAS_RETURN_VALUE_ERROR","PUMAS_N_RETURNS"],"type":"enum","file":"pumas.h","line":111,"lineto":160,"block":"PUMAS_RETURN_SUCCESS\nPUMAS_RETURN_END_OF_FILE\nPUMAS_RETURN_DECAY_ERROR\nPUMAS_RETURN_DENSITY_ERROR\nPUMAS_RETURN_INCOMPLETE_FILE\nPUMAS_RETURN_INDEX_ERROR\nPUMAS_RETURN_PHYSICS_ERROR\nPUMAS_RETURN_INTERNAL_ERROR\nPUMAS_RETURN_IO_ERROR\nPUMAS_RETURN_FORMAT_ERROR\nPUMAS_RETURN_MEDIUM_ERROR\nPUMAS_RETURN_MEMORY_ERROR\nPUMAS_RETURN_MISSING_LIMIT\nPUMAS_RETURN_MISSING_RANDOM\nPUMAS_RETURN_PATH_ERROR\nPUMAS_RETURN_RAISE_ERROR\nPUMAS_RETURN_TOO_LONG\nPUMAS_RETURN_UNDEFINED_DEDX\nPUMAS_RETURN_UNDEFINED_MDF\nPUMAS_RETURN_UNKNOWN_ELEMENT\nPUMAS_RETURN_UNKNOWN_MATERIAL\nPUMAS_RETURN_UNKNOWN_PARTICLE\nPUMAS_RETURN_VALUE_ERROR\nPUMAS_N_RETURNS","tdef":null,"description":" Return codes for the API functions. ","comments":"","fields":[{"type":"int","name":"PUMAS_RETURN_SUCCESS","comments":"<p>Execution was successful. </p>\n","value":0},{"type":"int","name":"PUMAS_RETURN_END_OF_FILE","comments":"<p>End of file was reached. </p>\n","value":1},{"type":"int","name":"PUMAS_RETURN_DECAY_ERROR","comments":"<p>The specified decay mode is not valid. </p>\n","value":2},{"type":"int","name":"PUMAS_RETURN_DENSITY_ERROR","comments":"<p>Some medium has a wrong density value. </p>\n","value":3},{"type":"int","name":"PUMAS_RETURN_INCOMPLETE_FILE","comments":"<p>Some data file is not complete. </p>\n","value":4},{"type":"int","name":"PUMAS_RETURN_INDEX_ERROR","comments":"<p>Some index is out of validity range. </p>\n","value":5},{"type":"int","name":"PUMAS_RETURN_PHYSICS_ERROR","comments":"<p>The Physics is not initialised or a NULL pointer was provided. </p>\n","value":6},{"type":"int","name":"PUMAS_RETURN_INTERNAL_ERROR","comments":"<p>An internal library error occured. </p>\n","value":7},{"type":"int","name":"PUMAS_RETURN_IO_ERROR","comments":"<p>Some read /write error occured. </p>\n","value":8},{"type":"int","name":"PUMAS_RETURN_FORMAT_ERROR","comments":"<p>Some file is badly formated. </p>\n","value":9},{"type":"int","name":"PUMAS_RETURN_MEDIUM_ERROR","comments":"<p>Wrong propagation medium. </p>\n","value":10},{"type":"int","name":"PUMAS_RETURN_MEMORY_ERROR","comments":"<p>Some memory couldn&#39;t be allocated. </p>\n","value":11},{"type":"int","name":"PUMAS_RETURN_MISSING_LIMIT","comments":"<p>A user supplied limit is required. </p>\n","value":12},{"type":"int","name":"PUMAS_RETURN_MISSING_RANDOM","comments":"<p>The random callback is not defined. </p>\n","value":13},{"type":"int","name":"PUMAS_RETURN_PATH_ERROR","comments":"<p>Some file couldn&#39;t be found. </p>\n","value":14},{"type":"int","name":"PUMAS_RETURN_RAISE_ERROR","comments":"<p>A raise was called without any catch. </p>\n","value":15},{"type":"int","name":"PUMAS_RETURN_TOO_LONG","comments":"<p>Some input string is too long. </p>\n","value":16},{"type":"int","name":"PUMAS_RETURN_UNDEFINED_DEDX","comments":"<p>No energy loss path specified. </p>\n","value":17},{"type":"int","name":"PUMAS_RETURN_UNDEFINED_MDF","comments":"<p>No MDF file specified. </p>\n","value":18},{"type":"int","name":"PUMAS_RETURN_UNKNOWN_ELEMENT","comments":"<p>An unkwon element was specified. </p>\n","value":19},{"type":"int","name":"PUMAS_RETURN_UNKNOWN_MATERIAL","comments":"<p>An unkwon material was specified. </p>\n","value":20},{"type":"int","name":"PUMAS_RETURN_UNKNOWN_PARTICLE","comments":"<p>The particle type is not known. </p>\n","value":21},{"type":"int","name":"PUMAS_RETURN_VALUE_ERROR","comments":"<p>Some input value is not valid. </p>\n","value":22},{"type":"int","name":"PUMAS_N_RETURNS","comments":"<p>The number of PUMAS return codes.  </p>\n","value":23}],"used":{"returns":["pumas_context_create","pumas_context_transport","pumas_error_raise","pumas_physics_composite_properties","pumas_physics_composite_update","pumas_physics_create","pumas_physics_create_tabulation","pumas_physics_dump","pumas_physics_load","pumas_physics_material_index","pumas_physics_material_name","pumas_physics_particle","pumas_physics_print","pumas_physics_property_cross_section","pumas_physics_property_energy_loss","pumas_physics_property_grammage","pumas_physics_property_kinetic_energy","pumas_physics_property_magnetic_rotation","pumas_physics_property_proper_time","pumas_physics_property_scattering_length","pumas_physics_table_index","pumas_physics_table_value","pumas_physics_tabulate","pumas_recorder_create"],"needs":["pumas_handler_cb"]}}],["pumas_scheme",{"decl":["PUMAS_SCHEME_NO_LOSS","PUMAS_SCHEME_CSDA","PUMAS_SCHEME_HYBRID","PUMAS_SCHEME_DETAILED"],"type":"enum","file":"pumas.h","line":71,"lineto":91,"block":"PUMAS_SCHEME_NO_LOSS\nPUMAS_SCHEME_CSDA\nPUMAS_SCHEME_HYBRID\nPUMAS_SCHEME_DETAILED","tdef":null,"description":" Schemes for the computation of energy losses.","comments":"","fields":[{"type":"int","name":"PUMAS_SCHEME_NO_LOSS","comments":"<p>All energy losses are disabled.</p>\n\n<p><strong>Note</strong> : This mode is provided for test purpose only. Running\n without energy losses requires specifying a range or grammage limit.</p>\n","value":-1},{"type":"int","name":"PUMAS_SCHEME_CSDA","comments":"<p>Energy losses are purely determinstic as given by the Continuously\n Slowing Down Approximation (CSDA).</p>\n","value":0},{"type":"int","name":"PUMAS_SCHEME_HYBRID","comments":"<p>Energy losses are simulated using an hybrid Monte-Carlo scheme with\n hard stochastic interactions and a deterministic Continuous Energy\n Loss (CEL).</p>\n","value":1},{"type":"int","name":"PUMAS_SCHEME_DETAILED","comments":"<p>In addition to the hybrid scheme small fluctuations of the CEL are\n also simulated.</p>\n","value":2}],"used":{"returns":[],"needs":["pumas_physics_property_energy_loss","pumas_physics_property_grammage","pumas_physics_property_kinetic_energy","pumas_physics_property_proper_time","pumas_physics_table_index","pumas_physics_table_value"]}}],["pumas_state",{"decl":["double charge","double kinetic","double distance","double grammage","double time","double weight","double [3] position","double [3] direction","int decayed"],"type":"struct","value":"pumas_state","file":"pumas.h","line":205,"lineto":225,"block":"double charge\ndouble kinetic\ndouble distance\ndouble grammage\ndouble time\ndouble weight\ndouble [3] position\ndouble [3] direction\nint decayed","tdef":null,"description":" Container for a Monte-Carlo state.","comments":"","fields":[{"type":"double","name":"charge","comments":"The particle&#39;s electric charge. Note that non physical values,\n i.e. different from 1 or -1, could be set. \n"},{"type":"double","name":"kinetic","comments":"The current kinetic energy, in GeV. \n"},{"type":"double","name":"distance","comments":"The total travelled distance, in m. \n"},{"type":"double","name":"grammage","comments":"The total travelled grammage, in kg/m<sup>2.</sup> \n"},{"type":"double","name":"time","comments":"The particle&#39;s proper time, in m/c. \n"},{"type":"double","name":"weight","comments":"The Monte-Carlo weight. \n"},{"type":"double [3]","name":"position","comments":"The absolute location, in m. \n"},{"type":"double [3]","name":"direction","comments":"The momentum&#39;s direction. \n"},{"type":"int","name":"decayed","comments":"Status flag telling if the particle has decayed or not.  \n"}],"used":{"returns":[],"needs":["pumas_context_transport","pumas_locals_cb","pumas_medium_cb","pumas_recorder_cb"]}}],["pumas_step",{"decl":["PUMAS_STEP_APPROXIMATE","PUMAS_STEP_EXACT"],"type":"enum","file":"pumas.h","line":355,"lineto":360,"block":"PUMAS_STEP_APPROXIMATE\nPUMAS_STEP_EXACT","tdef":null,"description":" Return codes for the `pumas_medium_cb` callback. ","comments":"","fields":[{"type":"int","name":"PUMAS_STEP_APPROXIMATE","comments":"<p>An approximate geometric step is proposed </p>\n","value":0},{"type":"int","name":"PUMAS_STEP_EXACT","comments":"<p>An exact geometric step is provided </p>\n","value":1}],"used":{"returns":["pumas_medium_cb"],"needs":[]}}]],"prefix":"include","groups":[["context",["pumas_context_create","pumas_context_destroy","pumas_context_physics_get","pumas_context_transport"]],["error",["pumas_error_catch","pumas_error_function","pumas_error_handler_get","pumas_error_handler_set","pumas_error_raise"]],["memory",["pumas_memory_allocator","pumas_memory_deallocator","pumas_memory_reallocator"]],["physics",["pumas_physics_composite_length","pumas_physics_composite_properties","pumas_physics_composite_update","pumas_physics_create","pumas_physics_create_tabulation","pumas_physics_destroy","pumas_physics_dump","pumas_physics_load","pumas_physics_material_index","pumas_physics_material_length","pumas_physics_material_name","pumas_physics_particle","pumas_physics_print","pumas_physics_property_cross_section","pumas_physics_property_energy_loss","pumas_physics_property_grammage","pumas_physics_property_kinetic_energy","pumas_physics_property_magnetic_rotation","pumas_physics_property_proper_time","pumas_physics_property_scattering_length","pumas_physics_table_index","pumas_physics_table_length","pumas_physics_table_value","pumas_physics_tabulate","pumas_physics_tabulation_clear"]],["pumas",["pumas_version"]],["recorder",["pumas_recorder_clear","pumas_recorder_create","pumas_recorder_destroy"]]]}