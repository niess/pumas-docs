{"files":[{"file":"pumas.h","functions":["pumas_locals_cb","pumas_recorder_cb","pumas_medium_cb","pumas_function_t","pumas_handler_cb","pumas_random_cb","pumas_dcs_t","pumas_physics_create","pumas_physics_destroy","pumas_physics_dump","pumas_physics_load","pumas_physics_cutoff","pumas_physics_elastic_ratio","pumas_context_transport","pumas_physics_print","pumas_version","pumas_physics_particle","pumas_error_function","pumas_error_handler_set","pumas_error_handler_get","pumas_error_catch","pumas_error_raise","pumas_context_create","pumas_context_random_seed_set","pumas_context_random_seed_get","pumas_context_random_load","pumas_context_random_dump","pumas_context_destroy","pumas_context_physics_get","pumas_physics_property_range","pumas_physics_property_proper_time","pumas_physics_property_magnetic_rotation","pumas_physics_property_kinetic_energy","pumas_physics_property_stopping_power","pumas_physics_property_energy_straggling","pumas_physics_property_elastic_cutoff_angle","pumas_physics_property_elastic_path","pumas_physics_property_transport_path","pumas_physics_property_cross_section","pumas_physics_element_length","pumas_physics_element_properties","pumas_physics_element_name","pumas_physics_element_index","pumas_physics_material_name","pumas_physics_material_index","pumas_physics_material_length","pumas_physics_material_properties","pumas_physics_composite_length","pumas_physics_composite_update","pumas_physics_composite_properties","pumas_physics_table_value","pumas_physics_table_length","pumas_physics_table_index","pumas_recorder_create","pumas_recorder_clear","pumas_recorder_destroy","pumas_allocate_cb","pumas_memory_allocator","pumas_reallocate_cb","pumas_memory_reallocator","pumas_deallocate_cb","pumas_memory_deallocator","pumas_physics_dcs","pumas_constant","pumas_dcs_register","pumas_dcs_get","pumas_dcs_default","pumas_dcs_range","pumas_elastic_dcs","pumas_elastic_path","pumas_electronic_dcs","pumas_electronic_density_effect","pumas_electronic_stopping_power"],"meta":{},"lines":2331}],"functions":{"pumas_physics_create":{"type":"function","file":"pumas.h","line":893,"lineto":896,"args":[{"name":"physics","type":"struct pumas_physics **","comment":"The physics tables.\n"},{"name":"particle","type":"enum pumas_particle","comment":"The type of the particle to transport.\n"},{"name":"mdf_path","type":"const char *","comment":"The path to a Material Description File (MDF), or <code>NULL</code>.\n"},{"name":"dedx_path","type":"const char *","comment":"The path to the energy loss tabulation(s), or <code>NULL</code>.\n"},{"name":"settings","type":"const struct pumas_physics_settings *","comment":"Extra physics settings or <code>NULL</code>.\n"}],"argline":"struct pumas_physics **physics, enum pumas_particle particle, const char *mdf_path, const char *dedx_path, const struct pumas_physics_settings *settings","sig":"struct pumas_physics **::enum pumas_particle::const char *::const char *::const struct pumas_physics_settings *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Create physics tables.</p>\n","comments":"<p class=\"longComment\">Create physics tables for a set of materials and a given <em>particle</em>. These tables are looked-up by the Monte Carlo engine for fast evaluation of physics properties during the transport. Tabulated properties are cross-sections, materials stopping power, transport mean free path length, etc.</p>\n\n<p class=\"longComment\">The materials to tabulate are specified in a Materials Description File (MDF) provided with the <em>mdf_path</em> argument. If a <code>NULL</code> argument is given then the path is read from the <code>PUMAS_MDF</code> environment variable. Examples of MDF are available from the <a href=\"https://github.com/niess/pumas-materials\">pumas-materials repository</a>.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: a MDF must be provided in any case.</p>\n\n<p class=\"longComment\">The physics creation generates stopping power table(s) in the Particle Data Group (PDG) format. These tables are written to the <em>dedx_path</em> directory. If the latter is <code>NULL</code> then it is read from the <code>PUMAS_DEDX</code> environment variable. If both are <code>NULL</code> then the tables are dumped beside the MDF, i.e. in the same directory.</p>\n\n<p class=\"longComment\">Specific physics settings can be selected by providing a <a href=\"./#v1.2/type/pumas_physics_settings\">pumas_physics_settings</a> structure. If <code>NULL</code> is provided then PUMAS default physics settings are used which should perform well for most use cases.</p>\n\n<p class=\"longComment\">Call <a href=\"./#v1.2/group/physics/pumas_physics_destroy\">pumas_physics_destroy</a> in order to unload the physics and release the corresponding alocated memory.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: computing the physics tables can be long, e.g. a few seconds per material defined in the MDF. The <a href=\"./#v1.2/group/physics/pumas_physics_dump\">pumas_physics_dump</a> and <a href=\"./#v1.2/group/physics/pumas_physics_load\">pumas_physics_load</a> functions allow to save and load the tables to/from a file. This can be used in order to greatly speed up the physics initialisation.</p>\n\n<p class=\"longComment\"><strong>Warning</strong>: this function is <strong>not</strong> thread safe.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_END_OF_FILE             And unexpected EOF occured.\n\n PUMAS_RETURN_FORMAT_ERROR            A file has a wrong format.\n\n PUMAS_RETURN_INCOMPLETE_FILE         There are missing entries in the MDF.\n\n PUMAS_RETURN_IO_ERROR                A file could not be read.\n\n PUMAS_RETURN_MEMORY_ERROR            Could not allocate memory.\n\n PUMAS_RETURN_MODEL_ERROR             A requested DCS model is not valid.\n\n PUMAS_RETURN_PATH_ERROR              A file could not be opened.\n\n PUMAS_RETURN_PHYSICS_ERROR           A `NULL` physics pointer was provided.\n\n PUMAS_RETURN_TOO_LONG                Some XML node in the MDF is too long.\n\n PUMAS_RETURN_UNDEFINED_MDF           No MDF was provided.\n\n PUMAS_RETURN_UNKNOWN_ELEMENT         An element in the MDF wasn&#39;t defined.\n\n PUMAS_RETURN_UNKNOWN_MATERIAL        An material in the MDF wasn&#39;t defined.\n\n PUMAS_RETURN_UNKNOWN_PARTICLE        The given type is not supported.\n\n PUMAS_RETURN_VALUE_ERROR             A bad cutoff or elastic ratio was provided.\n</code></pre>\n","group":"physics"},"pumas_physics_destroy":{"type":"function","file":"pumas.h","line":919,"lineto":919,"args":[{"name":"physics","type":"struct pumas_physics **","comment":"The physics tables.\n"}],"argline":"struct pumas_physics **physics","sig":"struct pumas_physics **","return":{"type":"void","comment":null},"description":"<p>Destroy a physics instance.</p>\n","comments":"<p class=\"longComment\">Finalise the physics and free its memory. Call <a href=\"./#v1.2/group/physics/pumas_physics_create\">pumas_physics_create</a> or <a href=\"./#v1.2/group/physics/pumas_physics_load\">pumas_physics_load</a> in order to reload the physics.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: at return the <em>physics</em> pointer points to <code>NULL</code>.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: finalising the physics does not release the memory allocated for related <a href=\"./#v1.2/type/pumas_context\">pumas_context</a>. This must be done explictly with the <a href=\"./#v1.2/group/context/pumas_context_destroy\">pumas_context_destroy</a> function.</p>\n\n<p class=\"longComment\"><strong>Warning</strong>: it is the user responsability to not use any simulation context whose physics would have been destroyed. Doing so would lead to unexpected results, e.g. memory corruption.</p>\n\n<p class=\"longComment\"><strong>Warning</strong>: this function is <strong>not</strong> thread safe.</p>\n","group":"physics"},"pumas_physics_dump":{"type":"function","file":"pumas.h","line":944,"lineto":945,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"stream","type":"FILE *","comment":"The stream where to dump.\n"}],"argline":"const struct pumas_physics *physics, FILE *stream","sig":"const struct pumas_physics *::FILE *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Dump the physics tables to a file.</p>\n","comments":"<p class=\"longComment\">Dump the <em>physics</em> tables to <em>stream</em> as a raw binary object.  This binary dump can be re-loaded with the <a href=\"./#v1.2/group/physics/pumas_physics_load\">pumas_physics_load</a> function. This provides a fast initialisation of the physics tables for subsequent uses.</p>\n\n<p class=\"longComment\"><strong>Warning</strong>: the binary dump is raw formated, thus <em>a priori</em> platform dependent.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_PHYSICS_ERROR           The physics is not initialised.\n\n PUMAS_RETURN_PATH_ERROR              The output stream in invalid (NULL).\n\n PUMAS_RETURN_IO_ERROR                Could not write to the stream.\n</code></pre>\n","group":"physics"},"pumas_physics_load":{"type":"function","file":"pumas.h","line":975,"lineto":976,"args":[{"name":"physics","type":"struct pumas_physics **","comment":"The physics tables.\n"},{"name":"stream","type":"FILE *","comment":"The stream to load from.\n"}],"argline":"struct pumas_physics **physics, FILE *stream","sig":"struct pumas_physics **::FILE *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Load the physics tables from a file.</p>\n","comments":"<p class=\"longComment\">Load the physics tables from a binary dump previously generated with <a href=\"./#v1.2/group/physics/pumas_physics_dump\">pumas_physics_dump</a>.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: loading to an already initialised physics instance generates an error. The <a href=\"./#v1.2/group/physics/pumas_physics_destroy\">pumas_physics_destroy</a> function must be called first.</p>\n\n<p class=\"longComment\"><strong>Warning</strong>: the binary dump is raw formated, thus <em>a priori</em> platform dependent.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_FORMAT_ERROR            The binary dump is not compatible with the current version.\n\n PUMAS_RETURN_PHYSICS_ERROR           The physics is not initialised.\n\n PUMAS_RETURN_PATH_ERROR              The input stream in invalid (null).\n\n PUMAS_RETURN_IO_ERROR                Could not read from the stream.\n</code></pre>\n","group":"physics"},"pumas_physics_cutoff":{"type":"function","file":"pumas.h","line":988,"lineto":988,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":null}],"argline":"const struct pumas_physics *physics","sig":"const struct pumas_physics *","return":{"type":"double","comment":"The cutoff value or -1 if the physics is not properly initialised.\n"},"description":"<p>Get the cutoff value used by the physics.</p>\n","comments":"<p class=\"longComment\">The cutoff value between soft and hard energy losses is specified during the physics initialisation with <a href=\"./#v1.2/group/physics/pumas_physics_create\">pumas_physics_create</a>. It cannot be modified afterwards. Instead a new physics object must be created.</p>\n","group":"physics"},"pumas_physics_elastic_ratio":{"type":"function","file":"pumas.h","line":1000,"lineto":1001,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"}],"argline":"const struct pumas_physics *physics","sig":"const struct pumas_physics *","return":{"type":"double","comment":"The elastic ratio or -1 if the physics is not properly initialised.\n"},"description":"<p>Get the elastic ratio value used by the physics.</p>\n","comments":"<p class=\"longComment\">The ratio of the m.f.p. to the transport m.f.p. for elastic events is specified during the physics initialisation with <a href=\"./#v1.2/group/physics/pumas_physics_create\">pumas_physics_create</a>.  It cannot be modified afterwards. Instead a new physics object must be created.</p>\n","group":"physics"},"pumas_context_transport":{"type":"function","file":"pumas.h","line":1041,"lineto":1043,"args":[{"name":"context","type":"struct pumas_context *","comment":"The simulation context.\n"},{"name":"state","type":"struct pumas_state *","comment":"The initial state or the final state at return.\n"},{"name":"event","type":"enum pumas_event *","comment":"The end event or <code>NULL</code>.\n"},{"name":"media","type":"struct pumas_medium *[2]","comment":"The initial and final media, or <code>NULL</code>.\n"}],"argline":"struct pumas_context *context, struct pumas_state *state, enum pumas_event *event, struct pumas_medium *[2] media","sig":"struct pumas_context *::struct pumas_state *::enum pumas_event *::struct pumas_medium *[2]","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Transport a Monte Carlo particle.</p>\n","comments":"<p class=\"longComment\">Transport a Monte Carlo <em>state</em> according to a simulation <em>context</em>.  The transport algorithm and the geometry are set by the <a href=\"./#v1.2/type/pumas_context\">pumas_context</a> structure.</p>\n\n<p class=\"longComment\">At return the particle <em>state</em> is updated. If <em>event</em> is not <code>NULL</code> it is filled with the transport end condition. If <em>media</em> is not <code>NULL</code> it contains the initial (index 0) and final (index 1) media seen by the particle.</p>\n\n<p class=\"longComment\"><strong>Warning</strong>: the state direction must be a unit vector. Otherwise an error is returned (see below).</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_ACCURACY_ERROR          The requested accuracy is not valid.\n\n PUMAS_RETURN_DENSITY_ERROR           A null or negative density was encountered.\n\n PUMAS_RETURN_DIRECTION_ERROR         A non unit direction was provided.\n\n PUMAS_RETURN_PHYSICS_ERROR           The physics is not initalised.\n\n PUMAS_RETURN_MEDIUM_ERROR            The medium callback was not defined.\n\n PUMAS_RETURN_MISSING_LIMIT           An external limit is needed.\n\n PUMAS_RETURN_VALUE_ERROR             The State or the context is NULL.\n</code></pre>\n","group":"context"},"pumas_physics_print":{"type":"function","file":"pumas.h","line":1066,"lineto":1068,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"stream","type":"FILE *","comment":"A stream where the summary will be formated to.\n"},{"name":"tabulation","type":"const char *","comment":"The tabulation separator or <code>NULL</code>.\n"},{"name":"newline","type":"const char *","comment":"The newline separator or <code>NULL</code>.\n"}],"argline":"const struct pumas_physics *physics, FILE *stream, const char *tabulation, const char *newline","sig":"const struct pumas_physics *::FILE *::const char *::const char *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Print a summary of the physics.</p>\n","comments":"<p class=\"longComment\">The summary is JSON formated. It provides information on the physics settings as well as a summary of the tabulated materials.  The <em>tabulation</em> and <em>newline</em> parameters allow to control the output rendering. Empty strings are used if these arguments are <code>NULL</code>.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_PHYSICS_ERROR           The physics is not initalised.\n\n PUMAS_RETURN_IO_ERROR                Could not write to *stream*.\n</code></pre>\n","group":"physics"},"pumas_version":{"type":"function","file":"pumas.h","line":1081,"lineto":1081,"args":[{"name":"major","type":"int *","comment":"The major version number or <code>NULL</code>.\n"},{"name":"minor","type":"int *","comment":"The minor version number or <code>NULL</code>.\n"},{"name":"patch","type":"int *","comment":"The patch version number or <code>NULL</code>.\n"}],"argline":"int *major, int *minor, int *patch","sig":"int *::int *::int *","return":{"type":"void","comment":null},"description":"<p>Get the version of the PUMAS library.</p>\n","comments":"<p class=\"longComment\">The PUMAS library version is given as MAJOR.MINOR.PATCH. If <em>major</em>, <em>minor</em> or <em>patch</em> is not required, then the corresponding pointer can be set to <code>NULL</code>.</p>\n","group":"pumas"},"pumas_physics_particle":{"type":"function","file":"pumas.h","line":1101,"lineto":1103,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"particle","type":"enum pumas_particle *","comment":"The type of the transported particle or <code>NULL</code>.\n"},{"name":"lifetime","type":"double *","comment":"The proper lifetime, in m/c, or <code>NULL</code>.\n"},{"name":"mass","type":"double *","comment":"The mass of the transported particle, in GeV, or <code>NULL</code>.\n"}],"argline":"const struct pumas_physics *physics, enum pumas_particle *particle, double *lifetime, double *mass","sig":"const struct pumas_physics *::enum pumas_particle *::double *::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Get information on the transported particle.</p>\n","comments":"<p class=\"longComment\">This function allows to retrieve information on the transported particle.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: not needed arguments can be set to <code>NULL</code>.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_PHYSICS_ERROR    The physics is not initalised.\n</code></pre>\n","group":"physics"},"pumas_error_function":{"type":"function","file":"pumas.h","line":1115,"lineto":1115,"args":[{"name":"function","type":"pumas_function_t *","comment":"The library function.\n"}],"argline":"pumas_function_t *function","sig":"pumas_function_t *","return":{"type":"const char *","comment":"a static string.\n"},"description":"<p>Return a string describing a PUMAS library function.</p>\n","comments":"<p class=\"longComment\">This function is meant for verbosing when handling errors.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: this function <strong>is</strong> thread safe.</p>\n","group":"error"},"pumas_error_handler_set":{"type":"function","file":"pumas.h","line":1128,"lineto":1128,"args":[{"name":"handler","type":"pumas_handler_cb *","comment":"The error handler to set or <code>NULL</code>.\n"}],"argline":"pumas_handler_cb *handler","sig":"pumas_handler_cb *","return":{"type":"void","comment":null},"description":"<p>Set or clear the error handler.</p>\n","comments":"<p class=\"longComment\">Set the error handler callback for PUMAS library functions.  The user can override the PUMAS default error handler by providing its own error handler. If <em>handler</em> is set to <code>NULL</code> then error callbacks are disabled.</p>\n\n<p class=\"longComment\"><strong>Warning</strong>: this function is <strong>not</strong> thread safe.</p>\n","group":"error"},"pumas_error_handler_get":{"type":"function","file":"pumas.h","line":1139,"lineto":1139,"args":[],"argline":"","sig":"","return":{"type":"pumas_handler_cb *","comment":"The current error handler or <code>NULL</code> if none.\n"},"description":"<p>Get the current error handler.</p>\n","comments":"<p class=\"longComment\">By default PUMAS is configured to printout to stderr whenever an error occurs and to exit back to the OS. See <a href=\"./#v1.2/group/error/pumas_error_handler_set\">pumas_error_handler_set</a> in order to override this behaviour.</p>\n","group":"error"},"pumas_error_catch":{"type":"function","file":"pumas.h","line":1157,"lineto":1157,"args":[{"name":"enable","type":"int","comment":"A flag for enabling or disabling error catch.\n"}],"argline":"int enable","sig":"int","return":{"type":"void","comment":null},"description":"<p>Catch the next error.</p>\n","comments":"<p class=\"longComment\">Enable or disable the catch of the next PUMAS library error. If catching is enabled then library errors do <strong>not</strong> trigger the error handler. Call <a href=\"./#v1.2/group/error/pumas_error_raise\">pumas_error_raise</a> to enable the error handler again and raise any caught error.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: only the first error occuring is recorded. Subsequent error(s) are muted but not recorded.</p>\n\n<p class=\"longComment\"><strong>Warning</strong>: this function is <strong>not</strong> thread safe. Only a single error stream can be handled at a time.</p>\n","group":"error"},"pumas_error_raise":{"type":"function","file":"pumas.h","line":1179,"lineto":1179,"args":[],"argline":"","sig":"","return":{"type":"enum pumas_return","comment":"If no error was caught <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise\n an error code is returned as detailed below.\n"},"description":"<p>Raise any caught error.</p>\n","comments":"<p class=\"longComment\">Raise any caught error. Error catching must have been enabled first with <a href=\"./#v1.2/group/error/pumas_error_catch\">pumas_error_catch</a> otherwise a <code>PUMAS_RETURN_RAISE_ERROR</code> is returned.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: calling this function disables further error&#39;s catching.</p>\n\n<p class=\"longComment\"><strong>Warning</strong>: this function is <strong>not</strong> thread safe. Only a single error stream can be handled at a time.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_RAISE_ERROR    Error catching hasn&#39;t been enabled.\n\n PUMAS_RETURN_*              Any caught error code.\n</code></pre>\n","group":"error"},"pumas_context_create":{"type":"function","file":"pumas.h","line":1209,"lineto":1211,"args":[{"name":"context","type":"struct pumas_context **","comment":"The new simulation context.\n"},{"name":"physics","type":"const struct pumas_physics *","comment":"A physics instance.\n"},{"name":"extra_memory","type":"int","comment":"Size of the user memory or 0 if none is requested.\n"}],"argline":"struct pumas_context **context, const struct pumas_physics *physics, int extra_memory","sig":"struct pumas_context **::const struct pumas_physics *::int","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Create a simulation context.</p>\n","comments":"<p class=\"longComment\">Create a new simulation <em>context</em> initialised with a default configuration. Call <a href=\"./#v1.2/group/context/pumas_context_destroy\">pumas_context_destroy</a> in order to release the memory allocated for the context. </p>\n\n<p class=\"longComment\"><strong>Note</strong>: the simulation context is bound to the provided <em>physics</em> instance.</p>\n\n<p class=\"longComment\">If <em>extra_memory</em> is strictly positive then the context memory is extended by <em>extra_memory</em> bytes reserved to the user. This memory is accessed with the <em>user_data</em> field of the instanciated context.</p>\n\n<p class=\"longComment\">See the <a href=\"./#v1.2/type/pumas_context\">pumas_context</a> structure for more detailed usage of a simulation context.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_MEMORY_ERROR            Could not allocate memory.\n\n PUMAS_RETURN_PHYSICS_ERROR           The physics is not initialised.\n</code></pre>\n","group":"context"},"pumas_context_random_seed_set":{"type":"function","file":"pumas.h","line":1235,"lineto":1236,"args":[{"name":"context","type":"struct pumas_context *","comment":"The simulation context.\n"},{"name":"seed","type":"const unsigned long *","comment":"The random seed or <code>NULL</code>.\n"}],"argline":"struct pumas_context *context, const unsigned long *seed","sig":"struct pumas_context *::const unsigned long *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Set the random seed of a simulation context.</p>\n","comments":"<p class=\"longComment\">Set the random seed of the simulation <em>context</em> and reset the random state accordingly.  If <code>NULL</code> is provided then the seed is randomly initialised from the OS, e.g.  using <code>/dev/urandom</code> on UNIX.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: each simulation context manages its own random stream.  See the <a href=\"./#v1.2/type/pumas_context\">pumas_context</a> documentation for more detailed usage.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_MEMORY_ERROR            Could not allocate memory.\n\n PUMAS_RETURN_PATH_ERROR              The OS random stream could not be read.\n</code></pre>\n","group":"context"},"pumas_context_random_seed_get":{"type":"function","file":"pumas.h","line":1260,"lineto":1261,"args":[{"name":"context","type":"struct pumas_context *","comment":"The simulation context.\n"},{"name":"seed","type":"unsigned long *","comment":"The corresponding random seed.\n"}],"argline":"struct pumas_context *context, unsigned long *seed","sig":"struct pumas_context *::unsigned long *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Get the random seed of a simulation context.</p>\n","comments":"<p class=\"longComment\">Get the random seed of the simulation context. If the seed has not been previously set with <a href=\"./#v1.2/group/context/pumas_context_random_seed_set\">pumas_context_random_seed_set</a> then it is randomly initialised from the OS, e.g. using <code>/dev/urandom</code> on UNIX.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: each simulation context manages its own random stream.  See the <a href=\"./#v1.2/type/pumas_context\">pumas_context</a> documentation for more detailed usage.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_MEMORY_ERROR            Could not allocate memory.\n\n PUMAS_RETURN_PATH_ERROR              The OS random stream could not be read.\n</code></pre>\n","group":"context"},"pumas_context_random_load":{"type":"function","file":"pumas.h","line":1285,"lineto":1286,"args":[{"name":"context","type":"struct pumas_context *","comment":"The simulation context.\n"},{"name":"stream","type":"FILE *","comment":"The stream to load from.\n"}],"argline":"struct pumas_context *context, FILE *stream","sig":"struct pumas_context *::FILE *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Load the random state of a simulation context.</p>\n","comments":"<p class=\"longComment\">Restore the random state of the simulation context from a <em>stream</em>.  See the <a href=\"./#v1.2/group/context/pumas_context_random_dump\">pumas_context_random_dump</a> function for the converse, i.e. dumping the random engine state to a file.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_FORMAT_ERROR            The dump version is invalid.\n\n PUMAS_RETURN_MEMORY_ERROR            Could not allocate memory.\n\n PUMAS_RETURN_IO_ERROR                Could not read from the stream.\n\n PUMAS_RETURN_PATH_ERROR              The input stream is invalid (NULL).\n</code></pre>\n","group":"context"},"pumas_context_random_dump":{"type":"function","file":"pumas.h","line":1308,"lineto":1309,"args":[{"name":"context","type":"struct pumas_context *","comment":"The simulation context.\n"},{"name":"stream","type":"FILE *","comment":"The stream to dump to.\n"}],"argline":"struct pumas_context *context, FILE *stream","sig":"struct pumas_context *::FILE *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Dump the random state of a simulation context.</p>\n","comments":"<p class=\"longComment\">Save the random state of the simulation context to a <em>stream</em>. See the <a href=\"./#v1.2/group/context/pumas_context_random_load\">pumas_context_random_load</a> function for the converse, i.e. loading back the random state from a stream.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_MEMORY_ERROR            Could not allocate memory.\n\n PUMAS_RETURN_IO_ERROR                Could not write to the stream.\n\n PUMAS_RETURN_PATH_ERROR              The input stream is invalid (NULL).\n</code></pre>\n","group":"context"},"pumas_context_destroy":{"type":"function","file":"pumas.h","line":1321,"lineto":1321,"args":[{"name":"context","type":"struct pumas_context **","comment":"The simulation context.\n"}],"argline":"struct pumas_context **context","sig":"struct pumas_context **","return":{"type":"void","comment":null},"description":"<p>Destroy a simulation context.</p>\n","comments":"<p class=\"longComment\">Destroy a simulation <em>context</em> previously created with <a href=\"./#v1.2/group/context/pumas_context_create\">pumas_context_create</a>.  The corresponding allocated memory is released.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: on return the <em>context</em> pointer is set to <code>NULL</code>.</p>\n","group":"context"},"pumas_context_physics_get":{"type":"function","file":"pumas.h","line":1332,"lineto":1333,"args":[{"name":"context","type":"const struct pumas_context *","comment":"The simulation context.\n"}],"argline":"const struct pumas_context *context","sig":"const struct pumas_context *","return":{"type":"const struct pumas_physics *","comment":"The corresponding physics or <code>NULL</code>.\n"},"description":"<p>Get the physics used by a simulation context.</p>\n","comments":"<p class=\"longComment\">The physics used by a simulation context cannot be changed. If an alternative physics is needed then a new <a href=\"./#v1.2/type/pumas_context\">pumas_context</a> object must be created.</p>\n","group":"context"},"pumas_physics_property_range":{"type":"function","file":"pumas.h","line":1363,"lineto":1365,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"mode","type":"enum pumas_mode","comment":"The energy loss mode.\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"energy","type":"double","comment":"The initial kinetic energy, in GeV.\n"},{"name":"range","type":"double *","comment":"The grammage range in kg/m<sup>2</sup>.\n"}],"argline":"const struct pumas_physics *physics, enum pumas_mode mode, int material, double energy, double *range","sig":"const struct pumas_physics *::enum pumas_mode::int::double::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>The CSDA range.</p>\n","comments":"<p class=\"longComment\">This function computes the CSDA range of the projectile in a given target <em>material</em>. See the <a href=\"./#v1.2/group/physics/pumas_physics_property_kinetic_energy\">pumas_physics_property_kinetic_energy</a> for the converse, i.e. getting the minimum energy for a given range.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: the energy loss mode must be one of <code>PUMAS_MODE_CSDA</code> or <code>PUMAS_MODE_MIXED</code>.</p>\n\n<p class=\"longComment\">Divide the <em>range</em> value by the target density in order to get the range in unit of distance.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The mode or material index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR           The physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_property_proper_time":{"type":"function","file":"pumas.h","line":1394,"lineto":1396,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"mode","type":"enum pumas_mode","comment":"The energy loss mode.\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"energy","type":"double","comment":"The initial kinetic energy, in GeV.\n"},{"name":"time","type":"double *","comment":"The normalised proper time in kg/m<sup>2</sup>.\n"}],"argline":"const struct pumas_physics *physics, enum pumas_mode mode, int material, double energy, double *time","sig":"const struct pumas_physics *::enum pumas_mode::int::double::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>The total proper time for continuous energy loss.</p>\n","comments":"<p class=\"longComment\">This function computes the ellapsed proper time of a particle over its total range. Continuous energy loss is assumed.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: the energy loss mode must be one of <code>PUMAS_MODE_CSDA</code> or <code>PUMAS_MODE_MIXED</code>.</p>\n\n<p class=\"longComment\">Divide the <em>time</em> value by the target density times <em>c</em> in order to get the proper time in unit of time.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The mode or material index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR           The physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_property_magnetic_rotation":{"type":"function","file":"pumas.h","line":1421,"lineto":1423,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"energy","type":"double","comment":"The initial kinetic energy, in GeV.\n"},{"name":"angle","type":"double *","comment":"The normalised rotation angle in rad kg/m<sup>3</sup>/T.\n"}],"argline":"const struct pumas_physics *physics, int material, double energy, double *angle","sig":"const struct pumas_physics *::int::double::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Magnetic rotation angle for a uniform magnetic field.</p>\n","comments":"<p class=\"longComment\">This function computes the magnetic rotation angle of a particle over its total range. A uniform magnetic field is assumed with CSDA energy loss.</p>\n\n<p class=\"longComment\">Multiply the returned value by the amplitude of the transverse magnetic field and divide by the target density in order to get the rotation angle in radian.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The material index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR           The physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_property_kinetic_energy":{"type":"function","file":"pumas.h","line":1450,"lineto":1452,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"mode","type":"enum pumas_mode","comment":"The energy loss mode\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"range","type":"double","comment":"The requested grammage range, in kg/m<sup>2</sup>.\n"},{"name":"energy","type":"double *","comment":"The required kinetic energy in GeV.\n"}],"argline":"const struct pumas_physics *physics, enum pumas_mode mode, int material, double range, double *energy","sig":"const struct pumas_physics *::enum pumas_mode::int::double::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Kinetic energy for travelling over a given CSDA range.</p>\n","comments":"<p class=\"longComment\">This is the inverse of the <a href=\"./#v1.2/group/physics/pumas_physics_property_range\">pumas_physics_property_range</a> function. It computes the minimum kinetic energy needed in order to cross a given range of material, assuming deterministic (CSDA) energy loss.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: the energy loss mode must be one of <code>PUMAS_MODE_CSDA</code> or <code>PUMAS_MODE_MIXED</code>.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The mode or material index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR           The physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_property_stopping_power":{"type":"function","file":"pumas.h","line":1482,"lineto":1484,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"mode","type":"enum pumas_mode","comment":"The energy loss mode\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"energy","type":"double","comment":"The kinetic energy, in GeV.\n"},{"name":"dedx","type":"double *","comment":"The computed stopping power in GeV/(kg/m<sup>2</sup>).\n"}],"argline":"const struct pumas_physics *physics, enum pumas_mode mode, int material, double energy, double *dedx","sig":"const struct pumas_physics *::enum pumas_mode::int::double::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Stopping power per unit mass.</p>\n","comments":"<p class=\"longComment\">This function computes the stopping power in a given <em>material</em>. See the <code>pumas_property_range</code> function in order to get the corresponding CSDA range.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: the energy loss mode must be one of <code>PUMAS_MODE_CSDA</code> or <code>PUMAS_MODE_MIXED</code>. In the latter case the stopping power is restricted to soft collisions.</p>\n\n<p class=\"longComment\">The stopping power, <em>dedx</em>, is given per unit mass. Multiply by the target density in order to get the stopping power per unit length.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The mode or material index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR           The physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_property_energy_straggling":{"type":"function","file":"pumas.h","line":1513,"lineto":1515,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"energy","type":"double","comment":"The kinetic energy, in GeV.\n"},{"name":"straggling","type":"double *","comment":"The computed energy loss straggling in GeV<sup>2</sup>/(kg/m<sup>2</sup>).\n"}],"argline":"const struct pumas_physics *physics, int material, double energy, double *straggling","sig":"const struct pumas_physics *::int::double::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Energy loss straggling parameter.</p>\n","comments":"<p class=\"longComment\">The energy loss straggling parameter, Ω<sub>s</sub>. This parameter quantifies the fluctuations of the soft electronic energy loss in straggled mode (<code>PUMAS_MODE_STRAGGLED</code>).</p>\n\n<p class=\"longComment\"><strong>Note</strong> : the energy loss straggling is applied to electronic collisions only.</p>\n\n<p class=\"longComment\">The straggling per unit mass of the target is returned, in GeV<sup>2</sup>/(kg/m<sup>2</sup>). Multiply by the target density in order to get the straggling in unit of Gev<sup>2</sup>.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The material index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR           The physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_property_elastic_cutoff_angle":{"type":"function","file":"pumas.h","line":1541,"lineto":1543,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"energy","type":"double","comment":"The kinetic energy, in GeV.\n"},{"name":"angle","type":"double *","comment":"The corresponding angle, in rad.\n"}],"argline":"const struct pumas_physics *physics, int material, double energy, double *angle","sig":"const struct pumas_physics *::int::double::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Cutoff angle for hard elastic collisions.</p>\n","comments":"<p class=\"longComment\">The cutoff angle is set from the physics <em>elastic_ratio</em> following <a href=\"https://doi.org/10.1016/0168-583X(93)95827-R\">Fernandez-Varea et al. (1993)</a>. It is computed at the physics creation and cannot be modified afterwards.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: the returned cutoff angle is defined in the center of mass frame of the collision.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The material index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR           The physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_property_elastic_path":{"type":"function","file":"pumas.h","line":1569,"lineto":1571,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"energy","type":"double","comment":"The kinetic energy, in GeV.\n"},{"name":"length","type":"double *","comment":"The corresponding length, in kg/m<sup>2</sup>.\n"}],"argline":"const struct pumas_physics *physics, int material, double energy, double *length","sig":"const struct pumas_physics *::int::double::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Mean free path for hard elastic collisions.</p>\n","comments":"<p class=\"longComment\">The mean free path is restricted to hard elastic collisions with an angle larger than a cutoff value, as returned by <a href=\"./#v1.2/group/physics/pumas_physics_property_elastic_cutoff_angle\">pumas_physics_property_elastic_cutoff_angle</a>. Soft collisions are included in the multiple scattering (see <a href=\"./#v1.2/group/physics/pumas_physics_property_transport_path\">pumas_physics_property_transport_path</a>).</p>\n\n<p class=\"longComment\">The path per unit mass of the target is returned, in kg/m<sup>2</sup>. Divide by the target density in order to get the path in unit of distance.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The material index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR           The physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_property_transport_path":{"type":"function","file":"pumas.h","line":1600,"lineto":1602,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"mode","type":"enum pumas_mode","comment":"The energy loss mode.\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"energy","type":"double","comment":"The kinetic energy, in GeV.\n"},{"name":"path","type":"double *","comment":"The corresponding path per unit mass, in kg/m<sup>2</sup>.\n"}],"argline":"const struct pumas_physics *physics, enum pumas_mode mode, int material, double energy, double *path","sig":"const struct pumas_physics *::enum pumas_mode::int::double::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Transport mean free path for soft collisions.</p>\n","comments":"<p class=\"longComment\">The transport m.f.p., λ, is related to the standard deviation of the polar multiple scattering angle&#39;s as θ<sup>2</sup> = X/(2λ), with X the column depth.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: the transport path includes all soft collisions, not only elastic ones.</p>\n\n<p class=\"longComment\">The path per unit mass of the target is returned, in kg/m<sup>2</sup>. Divide by the target density in order to get the path in unit of distance.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The material index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR           The physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_property_cross_section":{"type":"function","file":"pumas.h","line":1633,"lineto":1635,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"energy","type":"double","comment":"The kinetic energy, in GeV.\n"},{"name":"cross_section","type":"double *","comment":"The computed cross-section value.\n"}],"argline":"const struct pumas_physics *physics, int material, double energy, double *cross_section","sig":"const struct pumas_physics *::int::double::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Cross-section for hard collisions.</p>\n","comments":"<p class=\"longComment\">The returned cross-section is restricted hard collisions with fractionnal energy loss larger than the physics <em>cutoff</em>. Collisions with smaller energy loss are included in the continuous energy loss given by <a href=\"./#v1.2/group/physics/pumas_physics_property_stopping_power\">pumas_physics_property_stopping_power</a>.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: hard elastic collisions are not included in the cross-section but in the elastic mean free path given by the  <a href=\"./#v1.2/group/physics/pumas_physics_property_elastic_path\">pumas_physics_property_elastic_path</a> function.</p>\n\n<p class=\"longComment\">The macroscopic cross-section is returned in unit m<sup>2</sup>/kg. Multiply by the target density in order to get the inverse of the interaction length in unit of distance.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The material index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR           The physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_element_length":{"type":"function","file":"pumas.h","line":1643,"lineto":1644,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"}],"argline":"const struct pumas_physics *physics","sig":"const struct pumas_physics *","return":{"type":"int","comment":"The total number of atomic elements for the physics.\n"},"description":"<p>The total number of atomic elements.</p>\n","comments":"","group":"physics"},"pumas_physics_element_properties":{"type":"function","file":"pumas.h","line":1666,"lineto":1668,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"index","type":"int","comment":"The element index.\n"},{"name":"Z","type":"double *","comment":"The element charge number.\n"},{"name":"A","type":"double *","comment":"The element mass number in g/mol.\n"},{"name":"I","type":"double *","comment":"The element mean excitation energy in GeV.\n"}],"argline":"const struct pumas_physics *physics, int index, double *Z, double *A, double *I","sig":"const struct pumas_physics *::int::double *::double *::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Get the properties of an atomic element.</p>\n","comments":"<p class=\"longComment\">Get the properties of an atomic element. The <em>Z</em>, <em>A</em> or <em>I</em> pointers can be <code>NULL</code> in which case the corresponding property is not retrieved.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR               The provided index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR             The physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_element_name":{"type":"function","file":"pumas.h","line":1690,"lineto":1691,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"index","type":"int","comment":"The atomic element index.\n"},{"name":"element","type":"const char **","comment":"The corresponding element name.\n"}],"argline":"const struct pumas_physics *physics, int index, const char **element","sig":"const struct pumas_physics *::int::const char **","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>The name of an atomic element given its index.</p>\n","comments":"<p class=\"longComment\">The atomic element name is defined in the Material Description File (MDF).</p>\n\n<p class=\"longComment\">See the <a href=\"./#v1.2/group/physics/pumas_physics_element_index\">pumas_physics_element_index</a> for the converse function, i.e. getting an element index given its name.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR               The provided index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR             The physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_element_index":{"type":"function","file":"pumas.h","line":1714,"lineto":1715,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"element","type":"const char *","comment":"The element name.\n"},{"name":"index","type":"int *","comment":"The corresponding index.\n"}],"argline":"const struct pumas_physics *physics, const char *element, int *index","sig":"const struct pumas_physics *::const char *::int *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>The index of an atomic element given its name.</p>\n","comments":"<p class=\"longComment\">The element index is given by its order of appeareance in the Material Description File (MDF).</p>\n\n<p class=\"longComment\">See the <a href=\"./#v1.2/group/physics/pumas_physics_element_name\">pumas_physics_element_name</a> for the converse function, i.e. getting an element name given its index.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_PHYSICS_ERROR             The physics is not initialised.\n\n PUMAS_RETURN_UNKNOWN_MATERIAL          The material is not defined.\n</code></pre>\n","group":"physics"},"pumas_physics_material_name":{"type":"function","file":"pumas.h","line":1740,"lineto":1741,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"index","type":"int","comment":"The material index.\n"},{"name":"material","type":"const char **","comment":"The corresponding material name.\n"}],"argline":"const struct pumas_physics *physics, int index, const char **material","sig":"const struct pumas_physics *::int::const char **","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>The name of a material given its index.</p>\n","comments":"<p class=\"longComment\">The material name is defined in the Material Description File (MDF).</p>\n\n<p class=\"longComment\"><strong>Note</strong>: this function can be used for both base materials and composite ones.</p>\n\n<p class=\"longComment\">See the <a href=\"./#v1.2/group/physics/pumas_physics_material_index\">pumas_physics_material_index</a> for the converse function, i.e. getting a material index given its name.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR               The provided index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR             The physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_material_index":{"type":"function","file":"pumas.h","line":1767,"lineto":1768,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"material","type":"const char *","comment":"The material name.\n"},{"name":"index","type":"int *","comment":"The corresponding index.\n"}],"argline":"const struct pumas_physics *physics, const char *material, int *index","sig":"const struct pumas_physics *::const char *::int *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>The index of a material given its name.</p>\n","comments":"<p class=\"longComment\">The material index is given by its order of appeareance in the Material Description File (MDF).</p>\n\n<p class=\"longComment\"><strong>Note</strong>: this function can be used for both base materials and composite ones.</p>\n\n<p class=\"longComment\">See the <a href=\"./#v1.2/group/physics/pumas_physics_material_name\">pumas_physics_material_name</a> for the converse function, i.e. getting a material name given its index.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_PHYSICS_ERROR             The physics is not initialised.\n\n PUMAS_RETURN_UNKNOWN_MATERIAL          The material is not defined.\n</code></pre>\n","group":"physics"},"pumas_physics_material_length":{"type":"function","file":"pumas.h","line":1779,"lineto":1780,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"}],"argline":"const struct pumas_physics *physics","sig":"const struct pumas_physics *","return":{"type":"int","comment":"The total number of known materials, base plus composite.\n"},"description":"<p>The total number of materials.</p>\n","comments":"<p class=\"longComment\"><strong>Note</strong>: this function returns the sum of the numbers of base materials and of composite ones.</p>\n","group":"physics"},"pumas_physics_material_properties":{"type":"function","file":"pumas.h","line":1805,"lineto":1807,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"index","type":"int","comment":"The material index.\n"},{"name":"length","type":"int *","comment":"The number of atomic elements.\n"},{"name":"density","type":"double *","comment":"The material reference density in kg/m<sup>3</sup>.\n"},{"name":"I","type":"double *","comment":"The material mean excitation energy in GeV.\n"},{"name":"components","type":"int *","comment":"The vector of indices of the atomic elements.\n"},{"name":"fractions","type":"double *","comment":"The vector of mass fractions of the atomic elements.\n"}],"argline":"const struct pumas_physics *physics, int index, int *length, double *density, double *I, int *components, double *fractions","sig":"const struct pumas_physics *::int::int *::double *::double *::int *::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Get the properties of a material.</p>\n","comments":"<p class=\"longComment\">Get the properties of a base material. <code>length</code>, <code>density</code>, <code>I</code>, <code>components</code> or <code>fractions</code> can be <code>NULL</code> in which case the corresponding property is not retrieved.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR               The provided index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR             The physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_composite_length":{"type":"function","file":"pumas.h","line":1815,"lineto":1816,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"}],"argline":"const struct pumas_physics *physics","sig":"const struct pumas_physics *","return":{"type":"int","comment":"The number of composite materials.\n"},"description":"<p>The number of composite materials.</p>\n","comments":"","group":"physics"},"pumas_physics_composite_update":{"type":"function","file":"pumas.h","line":1841,"lineto":1842,"args":[{"name":"physics","type":"struct pumas_physics *","comment":"The physics tables.\n"},{"name":"material","type":"int","comment":"The composite material index.\n"},{"name":"fractions","type":"const double *","comment":"The mass fractions of the constitutive base materials.\n"}],"argline":"struct pumas_physics *physics, int material, const double *fractions","sig":"struct pumas_physics *::int::const double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Update the properties of a composite material.</p>\n","comments":"<p class=\"longComment\">Update the composition of a composite material, i.e the mass fractions of its components.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: the provided mass fraction values are normalised to one by PUMAS. Thus, they can be given e.g. in percent. Negative values are treated as zero.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_VALUE_ERROR               The fractions pointer is NULL.\n\n PUMAS_RETURN_INDEX_ERROR               The provided index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR             The physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_composite_properties":{"type":"function","file":"pumas.h","line":1865,"lineto":1867,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"index","type":"int","comment":"The composite material index.\n"},{"name":"length","type":"int *","comment":"The number of base materials componsing the composite.\n"},{"name":"components","type":"int *","comment":"The indices of the base materials.\n"},{"name":"fractions","type":"double *","comment":"The mass fractions of the constitutive base materials.\n"}],"argline":"const struct pumas_physics *physics, int index, int *length, int *components, double *fractions","sig":"const struct pumas_physics *::int::int *::int *::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Get the properties of a composite material.</p>\n","comments":"<p class=\"longComment\">Get the properties of a composite material. The <em>length</em>, <em>components</em> or <em>fractions</em> pointers can be <code>NULL</code> in which case the corresponding property is not retrieved.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR               The provided index is not valid.\n\n PUMAS_RETURN_PHYSICS_ERROR             The physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_table_value":{"type":"function","file":"pumas.h","line":1904,"lineto":1906,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"property","type":"enum pumas_property","comment":"The column index of a property of interest.\n"},{"name":"mode","type":"enum pumas_mode","comment":"The energy loss mode, i.e. <code>PUMAS_MODE_CSDA</code> or\n                      <code>PUMAS_MODE_MIXED</code>.\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"row","type":"int","comment":"The row index in the table.\n"},{"name":"value","type":"double *","comment":"The corresponding table value.\n"}],"argline":"const struct pumas_physics *physics, enum pumas_property property, enum pumas_mode mode, int material, int row, double *value","sig":"const struct pumas_physics *::enum pumas_property::enum pumas_mode::int::int::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Get tabulated physics values.</p>\n","comments":"<p class=\"longComment\">This function returns the tabulated value for a given <em>property</em> and <em>row</em> index. See <a href=\"./#v1.2/type/pumas_property\">pumas_property</a> for the list of tabulated physics properties. The rows of the table map to different kinetic energy values specified when creating the <a href=\"./#v1.2/type/pumas_physics\">pumas_physics</a> object.  Those can be retrieved with the <code>PUMAS_PROPERTY_KINETIC_ENERGY</code> property. The <a href=\"./#v1.2/group/physics/pumas_physics_table_length\">pumas_physics_table_length</a> returns the number of tabulated kinetic energy values.</p>\n\n<p class=\"longComment\">Except for the kinetic energy a <em>material</em> must be selected. In addition, the energy loss <em>mode</em> must be specified for related properties, e.g. for the stopping power (<code>PUMAS_PROPERTY_STOPPING_POWER</code>).</p>\n\n<p class=\"longComment\"><strong>Note</strong>: a negative row index can be provided in which case it refers to the end of the table. E.g. <code>row = -1</code> is the last entry and <code>row = -2</code> is the before last one.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             Some input index is not valid (property, material or mode).\n\n PUMAS_RETURN_PHYSICS_ERROR           The physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_physics_table_length":{"type":"function","file":"pumas.h","line":1918,"lineto":1918,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"}],"argline":"const struct pumas_physics *physics","sig":"const struct pumas_physics *","return":{"type":"int","comment":"The number of rows.\n"},"description":"<p>The number of rows in physics tabulations.</p>\n","comments":"<p class=\"longComment\">Physics properties are tabulated as function of the projectile kinetic energy. This function returns the number of tabulated kinetic energies, i.e. the number of rows in physics tables.</p>\n","group":"physics"},"pumas_physics_table_index":{"type":"function","file":"pumas.h","line":1953,"lineto":1955,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"property","type":"enum pumas_property","comment":"The column index of the property.\n"},{"name":"mode","type":"enum pumas_mode","comment":"The energy loss mode.\n"},{"name":"material","type":"int","comment":"The material index.\n"},{"name":"value","type":"double","comment":"The property value.\n"},{"name":"index","type":"int *","comment":"The row index from below for the given value.\n"}],"argline":"const struct pumas_physics *physics, enum pumas_property property, enum pumas_mode mode, int material, double value, int *index","sig":"const struct pumas_physics *::enum pumas_property::enum pumas_mode::int::double::int *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Compute the table row index for a given property and value.</p>\n","comments":"<p class=\"longComment\">This function is the converse of the <code>pumas_physics_property_value</code>. It returns the row index corresponding to a given property and value.</p>\n\n<p class=\"longComment\"><strong>Warning</strong>: in the case of an out of bounds value the closest index value is provided and <code>PUMAS_RETURN_VALUE_ERROR</code> is returned.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: only monotone properties are supported, that is when there is at most one solution for the inverse. Supported properties are: <code>PUMAS_PROPERTY_RANGE</code>, <code>PUMAS_PROPERTY_KINETIC_ENERGY</code>, <code>PUMAS_PROPERTY_MAGNETIC_ROTATION</code> and <code>PUMAS_PROPERTY_PROPER_TIME</code>.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             Some input index is not valid (property, material or mode).\n\n PUMAS_RETURN_PHYSICS_ERROR           The physics is not initialised.\n\n PUMAS_RETURN_VALUE_ERROR             The provided value is out of the table.\n</code></pre>\n","group":"physics"},"pumas_recorder_create":{"type":"function","file":"pumas.h","line":1978,"lineto":1979,"args":[{"name":"recorder","type":"struct pumas_recorder **","comment":"The Monte Carlo recorder.\n"},{"name":"extra_memory","type":"int","comment":"The size of the user extra memory if any is claimed.\n"}],"argline":"struct pumas_recorder **recorder, int extra_memory","sig":"struct pumas_recorder **::int","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Create a new Monte Carlo recorder.</p>\n","comments":"<p class=\"longComment\">Create a new <em>recorder</em> object for Monte Carlo steps. The recorder starts configured with a built-in algorithm recording all Monte Carlo steps as <a href=\"./#v1.2/type/pumas_frame\">pumas_frame</a> objects. See the <a href=\"./#v1.2/type/pumas_recorder\">pumas_recorder</a> structure for configuration options and usage.</p>\n\n<p class=\"longComment\">If <em>extra_memory</em> is strictly positive the recorder is extended by <em>extra_memory</em> bytes for user usage. This memory can then be accessed with the <em>user_data</em> field of the returned <a href=\"./#v1.2/type/pumas_recorder\">pumas_recorder</a> structure.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_MEMORY_ERROR    Could not allocate memory.\n</code></pre>\n","group":"recorder"},"pumas_recorder_clear":{"type":"function","file":"pumas.h","line":1989,"lineto":1989,"args":[{"name":"recorder","type":"struct pumas_recorder *","comment":"The recorder handle.\n"}],"argline":"struct pumas_recorder *recorder","sig":"struct pumas_recorder *","return":{"type":"void","comment":null},"description":"<p>Clear all recorded frames.</p>\n","comments":"<p class=\"longComment\">Erase all recorded <a href=\"./#v1.2/type/pumas_frame\">pumas_frame</a> instances from the recorder and reset the frame count.</p>\n","group":"recorder"},"pumas_recorder_destroy":{"type":"function","file":"pumas.h","line":2005,"lineto":2005,"args":[{"name":"recorder","type":"struct pumas_recorder **","comment":"The recorder handle.\n"}],"argline":"struct pumas_recorder **recorder","sig":"struct pumas_recorder **","return":{"type":"void","comment":null},"description":"<p>Destroy a Monte Carlo recorder.</p>\n","comments":"<p class=\"longComment\">Destroy a Monte Carlo recorder by releasing its associated memory, i.e. the recorder is cleared before beeing destroyed.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: at return <code>recorder</code> is set to <code>NULL</code>.</p>\n\n<p class=\"longComment\"><strong>Warning</strong>: if a user supplied <em>record</em> callback is used instead of the built-in <a href=\"./#v1.2/type/pumas_frame\">pumas_frame</a> recorder then it is the user responsibility to properly manage any self allocated memory.</p>\n","group":"recorder"},"pumas_memory_allocator":{"type":"function","file":"pumas.h","line":2028,"lineto":2028,"args":[{"name":"allocator","type":"pumas_allocate_cb *","comment":"The user supplied memory allocator, or <code>NULL</code>.\n"}],"argline":"pumas_allocate_cb *allocator","sig":"pumas_allocate_cb *","return":{"type":"void","comment":null},"description":"<p>Set the memory allocation function for the PUMAS library.</p>\n","comments":"<p class=\"longComment\">This function allows to specify a custom memory allocation function for PUMAS. Passing a <code>NULL</code> value results in PUMAS using its default allocator, i.e. <code>malloc</code>.</p>\n\n<p class=\"longComment\"><strong>Warning</strong>: this function is <strong>not</strong> thread safe.</p>\n","group":"memory"},"pumas_memory_reallocator":{"type":"function","file":"pumas.h","line":2052,"lineto":2052,"args":[{"name":"reallocator","type":"pumas_reallocate_cb *","comment":"The user supplied memory reallocator, or <code>NULL</code>.\n"}],"argline":"pumas_reallocate_cb *reallocator","sig":"pumas_reallocate_cb *","return":{"type":"void","comment":null},"description":"<p>Set the memory re-allocation function for the PUMAS library.</p>\n","comments":"<p class=\"longComment\">This function allows to specify a custom memory re-allocation function for PUMAS. Passing a <code>NULL</code> value results in PUMAS using its default reallocator, i.e. <code>realloc</code>.</p>\n\n<p class=\"longComment\"><strong>Warning</strong>: this function is <strong>not</strong> thread safe.</p>\n","group":"memory"},"pumas_memory_deallocator":{"type":"function","file":"pumas.h","line":2074,"lineto":2074,"args":[{"name":"deallocator","type":"pumas_deallocate_cb *","comment":"The user supplied memory deallocator, or <code>NULL</code>.\n"}],"argline":"pumas_deallocate_cb *deallocator","sig":"pumas_deallocate_cb *","return":{"type":"void","comment":null},"description":"<p>Set the memory deallocation function for the PUMAS library.</p>\n","comments":"<p class=\"longComment\">This function allows to specify a custom memory deallocation function for PUMAS. Passing a <code>NULL</code> value results in PUMAS using its default deallocator, i.e. <code>free</code>.</p>\n\n<p class=\"longComment\"><strong>Warning</strong>: this function is <strong>not</strong> thread safe.</p>\n","group":"memory"},"pumas_physics_dcs":{"type":"function","file":"pumas.h","line":2105,"lineto":2107,"args":[{"name":"physics","type":"const struct pumas_physics *","comment":"The physics tables.\n"},{"name":"process","type":"enum pumas_process","comment":"The physics process.\n"},{"name":"model","type":"const char **","comment":"The corresponding DCS model.\n"},{"name":"dcs","type":"pumas_dcs_t **","comment":"The corresponding DCS function.\n"}],"argline":"const struct pumas_physics *physics, enum pumas_process process, const char **model, pumas_dcs_t **dcs","sig":"const struct pumas_physics *::enum pumas_process::const char **::pumas_dcs_t **","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Get the Differential Cross-Section (DCS) used by the physics.</p>\n","comments":"<p class=\"longComment\">This function provides the DCSs for radiative processes used by a <em>physics</em> instance. See the <a href=\"./#v1.2/group/dcs/pumas_dcs_get\">pumas_dcs_get</a> function in order to get the DCS for a specific model of radiative process.</p>\n\n<p class=\"longComment\">The <em>dcs</em> and <em>model</em> return values are optionnal. If a <code>NULL</code> pointer is provided then the corresponding return value is not filled.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: the DCS models for radiative processes are set at the physics creation and cannot be changed afterwards. Elastic and electronic collisions use fixed models. The corresponding DCSs are given by the <a href=\"./#v1.2/group/elastic/pumas_elastic_dcs\">pumas_elastic_dcs</a> and <a href=\"./#v1.2/group/electronic/pumas_electronic_dcs\">pumas_electronic_dcs</a> functions.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The process index is not a valid.\n\n PUMAS_RETURN_PHYSICS_ERROR           The physics is not initialised.\n</code></pre>\n","group":"physics"},"pumas_constant":{"type":"function","file":"pumas.h","line":2128,"lineto":2129,"args":[{"name":"index","type":"enum pumas_constant","comment":"The constant index.\n"},{"name":"value","type":"double *","comment":"The corresponding value.\n"}],"argline":"enum pumas_constant index, double *value","sig":"enum pumas_constant::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Get a PUMAS library constant.</p>\n","comments":"<p class=\"longComment\">This function allows to retrieve the numeric values of physics constants used in PUMAS. See the <a href=\"./#v1.2/type/pumas_constant\">pumas_constant</a> enum for a list of available constants.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: values are returned in PUMAS system of units, i.e. GeV, m, etc.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The index is not a valid.\n\n PUMAS_RETURN_VALUE_ERROR             The value pointer is NULL.\n</code></pre>\n","group":"pumas"},"pumas_dcs_register":{"type":"function","file":"pumas.h","line":2161,"lineto":2162,"args":[{"name":"process","type":"enum pumas_process","comment":"The physics process index.\n"},{"name":"model","type":"const char *","comment":"The model name.\n"},{"name":"dcs","type":"pumas_dcs_t *","comment":"The model DCS.\n"}],"argline":"enum pumas_process process, const char *model, pumas_dcs_t *dcs","sig":"enum pumas_process::const char *::pumas_dcs_t *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Register a Differential Cross Section (DCS) model to PUMAS.</p>\n","comments":"<p class=\"longComment\">This function allows to register a DCS model for a radiative <em>process</em>. Note that the <em>model</em> name must not be already used otherwise an error is returned.  Only the following processes can be user defined: Bremsstrahlung, e<sup>+</sup>e<sup>-</sup> pair production and photonuclear interactions.  Electronic and elastic collisions are built-in.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: it is not possible to un-register a model.</p>\n\n<p class=\"longComment\"><strong>Warning</strong>: this function is <strong>not</strong> thread safe.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The process index is not a valid.\n\n PUMAS_RETURN_MEMORY_ERROR            The maximum number of models was reached.\n\n PUMAS_RETURN_MODEL_ERROR             The model name is already used.\n\n PUMAS_RETURN_VALUE_ERROR             A NULL model or dcs was provided.\n</code></pre>\n","group":"dcs"},"pumas_dcs_get":{"type":"function","file":"pumas.h","line":2186,"lineto":2187,"args":[{"name":"process","type":"enum pumas_process","comment":"The physics process index.\n"},{"name":"model","type":"const char *","comment":"The model name.\n"},{"name":"dcs","type":"pumas_dcs_t **","comment":"The corresponding DCS.\n"}],"argline":"enum pumas_process process, const char *model, pumas_dcs_t **dcs","sig":"enum pumas_process::const char *::pumas_dcs_t **","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Differential Cross Section (DCS) for a given model.</p>\n","comments":"<p class=\"longComment\">This function allows to retrieve the DCS for a given physics <em>process</em> and <em>model</em>. See the <a href=\"./#v1.2/type/pumas_physics_settings\">pumas_physics_settings</a> structure for a list of models available by default. Extra models can be registered with the <a href=\"./#v1.2/group/dcs/pumas_dcs_register\">pumas_dcs_register</a> function.</p>\n\n<p class=\"longComment\"><strong>Warning</strong>: this function is <strong>not</strong> thread safe.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The process index is not a valid.\n\n PUMAS_RETURN_MODEL_ERROR             The model name is not valid.\n</code></pre>\n","group":"dcs"},"pumas_dcs_default":{"type":"function","file":"pumas.h","line":2199,"lineto":2199,"args":[{"name":"process","type":"enum pumas_process","comment":"The physics process index.\n"}],"argline":"enum pumas_process process","sig":"enum pumas_process","return":{"type":"const char *","comment":"On success the default model name is returned otherwise <code>NULL</code>.\n"},"description":"<p>Default Differential Cross Section (DCS) model.</p>\n","comments":"<p class=\"longComment\">Get the name of the default DCS model for a given <em>process</em>.  If the requested process index is not valid then <code>NULL</code> is returned. See the <a href=\"./#v1.2/group/dcs/pumas_dcs_get\">pumas_dcs_get</a> function in order to get the DCS for a given model.</p>\n","group":"dcs"},"pumas_dcs_range":{"type":"function","file":"pumas.h","line":2220,"lineto":2221,"args":[{"name":"process","type":"enum pumas_process","comment":"The physics process index.\n"},{"name":"Z","type":"double","comment":"The target atomic number.\n"},{"name":"mass","type":"double","comment":"The projectile rest mass, in GeV.\n"},{"name":"energy","type":"double","comment":"The projectile kinetic energy, in GeV.\n"},{"name":"min","type":"double *","comment":"The maximum allowed energy transfer, in GeV, or <code>NULL</code>.\n"},{"name":"max","type":"double *","comment":null}],"argline":"enum pumas_process process, double Z, double mass, double energy, double *min, double *max","sig":"enum pumas_process::double::double::double::double *::double *","return":{"type":"enum pumas_return","comment":"On success <code>PUMAS_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Energy range for a given radiative process.</p>\n","comments":"<p class=\"longComment\">This function provides the range of valid energy transfers for the Differential Cross Section (DCS) of a given radiative <em>process</em>.</p>\n\n<p class=\"longComment\"><strong>Error codes</strong></p>\n\n<pre><code> PUMAS_RETURN_INDEX_ERROR             The process index is not a valid.\n</code></pre>\n","group":"dcs"},"pumas_elastic_dcs":{"type":"function","file":"pumas.h","line":2240,"lineto":2241,"args":[{"name":"Z","type":"double","comment":"The charge number of the target atom.\n"},{"name":"A","type":"double","comment":"The mass number of the target atom.\n"},{"name":"m","type":"double","comment":"The projectile rest mass, in GeV\n"},{"name":"K","type":"double","comment":"The projectile initial kinetic energy.\n"},{"name":"theta","type":"double","comment":"The scattering angle, in rad.\n"}],"argline":"double Z, double A, double m, double K, double theta","sig":"double::double::double::double::double","return":{"type":"double","comment":"The corresponding value of the atomic DCS, in m<sup>2</sup> / rad.\n"},"description":"<p>The differential cross section (DCS) for elastic collisions.</p>\n","comments":"<p class=\"longComment\">The elastic DCS is computed following <a href=\"https://doi.org/10.1016/j.nimb.2013.08.035\">Salvat (2013)</a> and <a href=\"https://arxiv.org/abs/1011.4822\">Boschini et al. (2014)</a>. The first Born approximation is used with coulomb corrections from <a href=\"https://doi.org/10.1103/PhysRevD.89.116016\">Kuraev et al. (2014)</a>. The target recoil is taken into account with an effective projectile mass.</p>\n","group":"elastic"},"pumas_elastic_path":{"type":"function","file":"pumas.h","line":2259,"lineto":2260,"args":[{"name":"order","type":"int","comment":"The order of the distribution.\n"},{"name":"Z","type":"double","comment":"The charge number of the target atom.\n"},{"name":"A","type":"double","comment":"The mass number of the target atom.\n"},{"name":"mass","type":"double","comment":null},{"name":"kinetic","type":"double","comment":null}],"argline":"int order, double Z, double A, double mass, double kinetic","sig":"int::double::double::double::double","return":{"type":"double","comment":"The corresponding path per unit mass, in kg / m<sup>2</sup>.\n"},"description":"<p>The (transport) mean free path for elastic collisions.</p>\n","comments":"<p class=\"longComment\">The m.f.p. is computed analytically by integration of the elastic DCS (see <a href=\"./#v1.2/group/elastic/pumas_elastic_dcs\">pumas_elastic_dcs</a>). If <em>order</em> is 0 then the single collision m.f.p. is returned. Else, if <em>order</em> is 1 then the transport m.f.p. is returned. For other values of <em>order</em> -1 is returned.</p>\n","group":"elastic"},"pumas_electronic_dcs":{"type":"function","file":"pumas.h","line":2278,"lineto":2279,"args":[{"name":"Z","type":"double","comment":"The charge number of the target atom.\n"},{"name":"I","type":"double","comment":"The mean excitation energy of the target atom.\n"},{"name":"m","type":"double","comment":"The projectile rest mass, in GeV\n"},{"name":"K","type":"double","comment":"The projectile initial kinetic energy.\n"},{"name":"q","type":"double","comment":"The projectile energy loss, in GeV.\n"}],"argline":"double Z, double I, double m, double K, double q","sig":"double::double::double::double::double","return":{"type":"double","comment":"The corresponding value of the atomic DCS, in m<sup>2</sup> / GeV.\n"},"description":"<p>The electronic differential cross section restricted to close collisions.</p>\n","comments":"<p class=\"longComment\">The electronic DCS restricted to close collisions is computed following <a href=\"https://doi.org/10.1016/j.nimb.2013.08.035\">Salvat (2013)</a>. An effective model is used with a cutoff set as a fraction of the mean excitation energy, I. This reproduces Salvat for energy losses, <em>q</em>, larger than the electrons binding energies.</p>\n","group":"electronic"},"pumas_electronic_density_effect":{"type":"function","file":"pumas.h","line":2302,"lineto":2304,"args":[{"name":"n_elements","type":"int","comment":"The number of atomic elements in the material.\n"},{"name":"Z","type":"const double *","comment":"The charge numbers of the constitutive atomic elements.\n"},{"name":"A","type":"const double *","comment":"The mass numbers of the constitutive atomic elements.\n"},{"name":"w","type":"const double *","comment":"The mass fractions of the atomic elements, or <code>NULL</code>.\n"},{"name":"I","type":"double","comment":"The mean excitation energy of the material, in GeV.\n"},{"name":"density","type":"double","comment":"The density of the material, in kg / m<sup>3</sup>.\n"},{"name":"gamma","type":"double","comment":"The relativistic gamma factor of the projectile.\n"}],"argline":"int n_elements, const double *Z, const double *A, const double *w, double I, double density, double gamma","sig":"int::const double *::const double *::const double *::double::double::double","return":{"type":"double","comment":"The corresponding density effect.\n"},"description":"<p>The electronic density effect for a material.</p>\n","comments":"<p class=\"longComment\">The density effect is computed following <a href=\"https://doi.org/10.1146/annurev.ns.13.120163.000245\">Fano (1963)</a>. Oscillators strength and level have been set from electrons binding energies of individual atomic elements. A global scaling factor is applied in order to match the Mean Excitation Energy.</p>\n\n<p class=\"longComment\">The mass fractions of the elements, <em>w</em>, can be <code>NULL</code> in wich case they are assumed to be 1. The mass fractions do not need to be normalised to 1.</p>\n","group":"electronic"},"pumas_electronic_stopping_power":{"type":"function","file":"pumas.h","line":2329,"lineto":2331,"args":[{"name":"n_elements","type":"int","comment":"The number of atomic elements in the material.\n"},{"name":"Z","type":"const double *","comment":"The charge numbers of the constitutive atomic elements.\n"},{"name":"A","type":"const double *","comment":"The mass numbers of the constitutive atomic elements.\n"},{"name":"w","type":"const double *","comment":"The mass fractions of the atomic elements, or <code>NULL</code>.\n"},{"name":"I","type":"double","comment":"The mean excitation energy of the material, in GeV.\n"},{"name":"density","type":"double","comment":"The density of the material, in kg / m<sup>3</sup>.\n"},{"name":"mass","type":"double","comment":"The mass of the projectile, in GeV / c<sup>2</sup>.\n"},{"name":"energy","type":"double","comment":"The energy of the projectile, in GeV\n"}],"argline":"int n_elements, const double *Z, const double *A, const double *w, double I, double density, double mass, double energy","sig":"int::const double *::const double *::const double *::double::double::double::double","return":{"type":"double","comment":"The corresponding stopping power per unit mass, in GeV m<sup>2</sup> / kg.\n"},"description":"<p>The stopping power due to collisions with atomic electrons.</p>\n","comments":"<p class=\"longComment\">The electronic stopping power is computed following <a href=\"https://doi.org/10.1016/j.nimb.2013.08.035\">Salvat (2013)</a>. The result is identical to <a href=\"https://doi.org/10.1006/adnd.2001.0861\">Groom et al. (2001)</a> except for the density effect. The latter is computed following <a href=\"https://doi.org/10.1146/annurev.ns.13.120163.000245\">Fano (1963)</a>, see e.g. <a href=\"./#v1.2/group/electronic/pumas_electronic_density_effect\">pumas_electronic_density_effect</a>.</p>\n\n<p class=\"longComment\">The mass fractions of the elements, <em>w</em>, can be <code>NULL</code> in wich case they are assumed to be 1. The mass fractions do not need to be normalised to 1.</p>\n","group":"electronic"}},"callbacks":{"pumas_locals_cb":{"type":"callback","file":"pumas.h","line":343,"lineto":344,"args":[{"name":"medium","type":"struct pumas_medium *","comment":"The propagation medium.\n"},{"name":"state","type":"struct pumas_state *","comment":"The Monte-Carlo state for which the local properties are\n                  requested.\n"},{"name":"locals","type":"struct pumas_locals *","comment":"A pointer to a <a href=\"./#v1.2/type/pumas_locals\">pumas_locals</a> structure to update.\n"}],"argline":"struct pumas_medium *medium, struct pumas_state *state, struct pumas_locals *locals","sig":"struct pumas_medium *::struct pumas_state *::struct pumas_locals *","return":{"type":"double","comment":"The size of local inhomogeneities (see below).\n"},"description":"<p>Callback for setting the local properties of a propagation medium.</p>\n","comments":"<p class=\"longComment\">The callback must return a length, in m, consistent with the size of the propagation medium inhomogeneities, e. g. ρ / |∇ ρ| for a density gradient. Returning zero or less signs that the propagation medium is fully uniform.</p>\n\n<p class=\"longComment\"><strong>Note</strong> that inhomogeneities modelled by the <a href=\"./#v1.2/type/pumas_locals\">pumas_locals</a> callback must be <strong>continuous</strong>. If the geometry has a density or magnetic field discontinuity then this must be modelled by using separate media on both sides of the discontinuity.</p>\n\n<p class=\"longComment\"><strong>Warning</strong> : it is an error to return zero or less for any position of the medium if at least one area is not uniform. Instead one should use two different media even though they have the same material base.</p>\n"},"pumas_recorder_cb":{"type":"callback","file":"pumas.h","line":404,"lineto":406,"args":[{"name":"context","type":"struct pumas_context *","comment":"The recording simulation context.\n"},{"name":"state","type":"struct pumas_state *","comment":"The recorded particle state.\n"},{"name":"medium","type":"struct pumas_medium *","comment":"The corresponding medium.\n"},{"name":"event","type":"enum pumas_event","comment":"The step event.\n"}],"argline":"struct pumas_context *context, struct pumas_state *state, struct pumas_medium *medium, enum pumas_event event","sig":"struct pumas_context *::struct pumas_state *::struct pumas_medium *::enum pumas_event","return":{"type":"void","comment":null},"description":"<p>A user supplied recorder callback.</p>\n","comments":"<p class=\"longComment\">This callback allows to customize the recording of PUMAS Monte-Carlo events.</p>\n\n<p class=\"longComment\"><strong>Note</strong> : by default the recorder uses an in-memory copy with dynamic allocation. Setting a custom recorder disables the default recording.</p>\n"},"pumas_medium_cb":{"type":"callback","file":"pumas.h","line":504,"lineto":506,"args":[{"name":"context","type":"struct pumas_context *","comment":"The Monte-Carlo context requiring a medium.\n"},{"name":"state","type":"struct pumas_state *","comment":"The Monte-Carlo state for which the medium is requested.\n"},{"name":"medium","type":"struct pumas_medium **","comment":"A pointer to store the medium or <code>NULL</code> if not requested.\n"},{"name":"step","type":"double *","comment":"The proposed step size or zero or less for an infinite\n                    medium. If not requested this points to <code>NULL</code>.\n"}],"argline":"struct pumas_context *context, struct pumas_state *state, struct pumas_medium **medium, double *step","sig":"struct pumas_context *::struct pumas_state *::struct pumas_medium **::double *","return":{"type":"enum pumas_step","comment":"If the proposed step size should be cross-checked by PUMAS\n <code>PUMAS_STEP_CHECK</code> should be returned otherwise <code>PUMAS_STEP_RAW</code>.\n"},"description":"<p>Callback for locating the propagation medium of a <a href=\"./#v1.2/type/pumas_state\">pumas_state</a>.</p>\n","comments":"<p class=\"longComment\">If <em>step</em> is not <code>NULL</code>, this callback must propose a Monte-Carlo stepping distance, in m, consistent with the geometry. Note that returning zero or less signs that the corresponding medium has no boundaries. When <em>medium</em> is not <code>NULL</code> it must be set to the located <a href=\"./#v1.2/type/pumas_medium\">pumas_medium</a>.</p>\n\n<p class=\"longComment\">In addition the user must return a <a href=\"./#v1.2/type/pumas_step\">pumas_step</a> enum indicating if the proposed <em>step</em> needs to be cross-checked by PUMAS or if it should be used raw. Managing steps that end on a geometry boundary can be tricky numerically. Therefore it is recommended to return <code>PUMAS_STEP_CHECK</code> if you are unsure of what to do since it is more robust. The raw mode is usefull if your geometry engine already performs those checks in order to avoid double work.</p>\n\n<p class=\"longComment\"><strong>Warning</strong> : it is an error to return zero or less for any state if the extension is finite.</p>\n\n<p class=\"longComment\"><strong>Warning</strong> : in backward Monte Carlo mode the particle is propagated reverse to the state direction. The user must take care to provide a <em>step</em> size accordingly, i.e. consistent with the geometry in both forward and backward modes.</p>\n"},"pumas_function_t":{"type":"callback","file":"pumas.h","line":514,"lineto":514,"args":[],"argline":"","sig":"","return":{"type":"void","comment":null},"description":"<p>Generic function pointer.</p>\n","comments":"<p class=\"longComment\">This is a generic function pointer used to identify the library functions, e.g. for error handling.</p>\n"},"pumas_handler_cb":{"type":"callback","file":"pumas.h","line":527,"lineto":528,"args":[{"name":"rc","type":"enum pumas_return","comment":"The PUMAS return code.\n"},{"name":"caller","type":"pumas_function_t *","comment":"The API function where the error occured.\n"},{"name":"message","type":"const char *","comment":"Brief description of the error.\n"}],"argline":"enum pumas_return rc, pumas_function_t *caller, const char *message","sig":"enum pumas_return::pumas_function_t *::const char *","return":{"type":"void","comment":null},"description":"<p>Callback for error handling.</p>\n","comments":"<p class=\"longComment\">The user can override the PUMAS default error handler by providing its own error handler. It will be called at the return of any PUMAS library function providing an error code.</p>\n"},"pumas_random_cb":{"type":"callback","file":"pumas.h","line":546,"lineto":546,"args":[{"name":"context","type":"struct pumas_context *","comment":"The simulation context requiring a random number.\n"}],"argline":"struct pumas_context *context","sig":"struct pumas_context *","return":{"type":"double","comment":"A uniform pseudo random number in [0;1].\n"},"description":"<p>Callback providing a stream of pseudo random numbers.</p>\n","comments":"<p class=\"longComment\"><strong>Note</strong> : this is the only random stream used by PUMAS. If overriding the default <a href=\"./#v1.2/type/pumas_context\">pumas_context</a> callback then the user must unsure proper behaviour, i.e. that a flat distribution in [0;1] is indeed returned.</p>\n\n<p class=\"longComment\"><strong>Warning</strong> : if multiple contexts are used the user must also ensure that this callback is thread safe, e.g. by using independant streams for each context or a locking mechanism in order to share a single random stream. The default <a href=\"./#v1.2/type/pumas_context\">pumas_context</a> random callback uses distinct random streams per context which ensures thread safety.</p>\n"},"pumas_dcs_t":{"type":"callback","file":"pumas.h","line":712,"lineto":712,"args":[{"name":"Z","type":"double","comment":"The charge number of the target atom.\n"},{"name":"A","type":"double","comment":"The mass number of the target atom.\n"},{"name":"m","type":"double","comment":"The projectile rest mass, in GeV\n"},{"name":"K","type":"double","comment":"The projectile kinetic energy, in GeV.\n"},{"name":"q","type":"double","comment":"The projectile energy loss, in GeV.\n"}],"argline":"double Z, double A, double m, double K, double q","sig":"double::double::double::double::double","return":{"type":"double","comment":"The corresponding value of the atomic DCS, in m<sup>2</sup>/GeV.\n"},"description":"<p>Prototype for a Differential Cross-Section (DCS).</p>\n","comments":"<p class=\"longComment\">The <a href=\"./#v1.2/group/dcs/pumas_dcs_get\">pumas_dcs_get</a> function allows to retrieve the DCS for a given process and model. Extra DCSs can be registered with the <a href=\"./#v1.2/group/dcs/pumas_dcs_register\">pumas_dcs_register</a> function.</p>\n\n<p class=\"longComment\"><strong>Note</strong> : only the Bremsstrahlung, pair creation and photonuclear processes can be modified.</p>\n"},"pumas_allocate_cb":{"type":"callback","file":"pumas.h","line":2015,"lineto":2015,"args":[{"name":"size","type":"int","comment":"The number of memory bytes to allocate.\n"}],"argline":"int size","sig":"int","return":{"type":"void *","comment":"The address of the allocated memory or <code>NULL</code> in case of faillure.\n"},"description":"<p>User supplied callback for memory allocation.</p>\n","comments":"<p class=\"longComment\">The provided callback must conform to the <code>malloc</code> semantic and behaviour.</p>\n"},"pumas_reallocate_cb":{"type":"callback","file":"pumas.h","line":2039,"lineto":2039,"args":[{"name":"ptr","type":"void *","comment":"The address of the memory to reallocate.\n"},{"name":"size","type":"int","comment":"The number of memory bytes requested for the reallocation.\n"}],"argline":"void *ptr, int size","sig":"void *::int","return":{"type":"void *","comment":"The address of the re-allocated memory or <code>NULL</code> in case of faillure.\n"},"description":"<p>User supplied callback for memory re-allocation.</p>\n","comments":"<p class=\"longComment\">The provided callback must conform to the <code>realloc</code> semantic and behaviour.</p>\n"},"pumas_deallocate_cb":{"type":"callback","file":"pumas.h","line":2061,"lineto":2061,"args":[{"name":"ptr","type":"void *","comment":null}],"argline":"void *ptr","sig":"void *","return":{"type":"void","comment":null},"description":"<p>User supplied callback for memory deallocation.</p>\n","comments":"<p class=\"longComment\">The provided callback must conform to the <code>free</code> semantic and behaviour.</p>\n"}},"globals":{},"types":[["pumas_constant",{"decl":["PUMAS_CONSTANT_ALPHA_EM","PUMAS_CONSTANT_AVOGADRO_NUMBER","PUMAS_CONSTANT_BOHR_RADIUS","PUMAS_CONSTANT_ELECTRON_MASS","PUMAS_CONSTANT_ELECTRON_RADIUS","PUMAS_CONSTANT_HBAR_C","PUMAS_CONSTANT_MUON_C_TAU","PUMAS_CONSTANT_MUON_MASS","PUMAS_CONSTANT_NEUTRON_MASS","PUMAS_CONSTANT_PION_MASS","PUMAS_CONSTANT_PROTON_MASS","PUMAS_CONSTANT_TAU_C_TAU","PUMAS_CONSTANT_TAU_MASS","PUMAS_N_CONSTANTS"],"type":"enum","file":"pumas.h","line":244,"lineto":273,"block":"PUMAS_CONSTANT_ALPHA_EM\nPUMAS_CONSTANT_AVOGADRO_NUMBER\nPUMAS_CONSTANT_BOHR_RADIUS\nPUMAS_CONSTANT_ELECTRON_MASS\nPUMAS_CONSTANT_ELECTRON_RADIUS\nPUMAS_CONSTANT_HBAR_C\nPUMAS_CONSTANT_MUON_C_TAU\nPUMAS_CONSTANT_MUON_MASS\nPUMAS_CONSTANT_NEUTRON_MASS\nPUMAS_CONSTANT_PION_MASS\nPUMAS_CONSTANT_PROTON_MASS\nPUMAS_CONSTANT_TAU_C_TAU\nPUMAS_CONSTANT_TAU_MASS\nPUMAS_N_CONSTANTS","tdef":null,"description":" Physics constants used by PUMAS. ","comments":"","fields":[{"type":"int","name":"PUMAS_CONSTANT_ALPHA_EM","comments":"<p class=\"longComment\">The electromagnetic coupling constant, alpha. </p>\n","value":0},{"type":"int","name":"PUMAS_CONSTANT_AVOGADRO_NUMBER","comments":"<p class=\"longComment\">The Avogadro number, in mol. </p>\n","value":1},{"type":"int","name":"PUMAS_CONSTANT_BOHR_RADIUS","comments":"<p class=\"longComment\">The electron Bohr radius, in m.  </p>\n","value":2},{"type":"int","name":"PUMAS_CONSTANT_ELECTRON_MASS","comments":"<p class=\"longComment\">The electron mass, in GeV/c<sup>2.</sup> </p>\n","value":3},{"type":"int","name":"PUMAS_CONSTANT_ELECTRON_RADIUS","comments":"<p class=\"longComment\">The classical electron radius, in m. </p>\n","value":4},{"type":"int","name":"PUMAS_CONSTANT_HBAR_C","comments":"<p class=\"longComment\">The classical electron radius, in m. </p>\n","value":5},{"type":"int","name":"PUMAS_CONSTANT_MUON_C_TAU","comments":"<p class=\"longComment\">The muon decay length, in m. </p>\n","value":6},{"type":"int","name":"PUMAS_CONSTANT_MUON_MASS","comments":"<p class=\"longComment\">The muon mass, in GeV/c<sup>2.</sup> </p>\n","value":7},{"type":"int","name":"PUMAS_CONSTANT_NEUTRON_MASS","comments":"<p class=\"longComment\">The neutron mass, in GeV/c<sup>2.</sup> </p>\n","value":8},{"type":"int","name":"PUMAS_CONSTANT_PION_MASS","comments":"<p class=\"longComment\">The mass of charged pions, in GeV/c<sup>2</sup> </p>\n","value":9},{"type":"int","name":"PUMAS_CONSTANT_PROTON_MASS","comments":"<p class=\"longComment\">The proton mass, in GeV/c<sup>2.</sup> </p>\n","value":10},{"type":"int","name":"PUMAS_CONSTANT_TAU_C_TAU","comments":"<p class=\"longComment\">The tau decay length, in m. </p>\n","value":11},{"type":"int","name":"PUMAS_CONSTANT_TAU_MASS","comments":"<p class=\"longComment\">The tau mass, in GeV/c<sup>2.</sup> </p>\n","value":12},{"type":"int","name":"PUMAS_N_CONSTANTS","comments":"<p class=\"longComment\">The number of PUMAS constants.  </p>\n","value":13}],"used":{"returns":[],"needs":["pumas_constant"]}}],["pumas_context",{"decl":["pumas_medium_cb * medium","pumas_random_cb * random","struct pumas_recorder * recorder","void * user_data","struct pumas_context_mode mode","enum pumas_event event","struct pumas_context_limit limit","double accuracy"],"type":"struct","value":"pumas_context","file":"pumas.h","line":631,"lineto":667,"tdef":null,"description":" A simulation context.","comments":"<p class=\"longComment\">This structure manages thread specific data for a PUMAS Monte Carlo simulation.  It also exposes configuration parameters for the Monte Carlo transport. The exposed parameters can be directly modified by the user.</p>\n\n<p class=\"longComment\"><strong>Warning</strong>: since the simulation context wraps opaque data it <strong>must</strong> be created (destroyed) with the <a href=\"./#v1.2/group/context/pumas_context_create\">pumas_context_create</a> (<a href=\"./#v1.2/group/context/pumas_context_destroy\">pumas_context_destroy</a>) function.</p>\n\n<p class=\"longComment\">A context created with <a href=\"./#v1.2/group/context/pumas_context_create\">pumas_context_create</a> is initialised with default settings. That is, the transport is configured for forward Monte Carlo with the highest level of detail available, i.e. energy straggling and scattering enabled.  This can be modified by overriding the <em>mode</em> attribute of the simulation context.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: in the case of a muon projectile, the default initialisation is to account for decays by weighting according to the proper time (<code>PUMAS_MODE_WEIGHTED</code>). However, for a tau projectile the default is to randomise the decay location (<code>PUMAS_MODE_RANDOMISE</code>).</p>\n\n<p class=\"longComment\">Each simulation context natively embeds a pseudo random engine. A Mersenne Twister algorithm is used. The random engine can be seeded with the <a href=\"./#v1.2/group/context/pumas_context_random_seed_set\">pumas_context_random_seed_set</a> function.  Note that two contexts seeded with the same value are 100% correlated. If no seed is provided then one is picked randomly from the OS, e.g.  from <code>/dev/urandom</code> on UNIX. Alternatively, a custom random engine can be used instead of the native one by overriding the <em>random</em> callback.</p>\n\n<p class=\"longComment\">The geometry of the simulation is specified by setting the <em>medium</em> field with a <a href=\"./#v1.2/group/callback/pumas_medium_cb\">pumas_medium_cb</a> callback.  By default the <em>medium</em> field is <code>NULL</code>. Note that it must be set by the user before calling <a href=\"./#v1.2/group/context/pumas_context_transport\">pumas_context_transport</a>.</p>\n\n<p class=\"longComment\">The <em>event</em> field of the simulation context allows to specify end conditions for the Monte Carlo transport. E.g. a lower (upper) limit can be set on the kinetic energy of the projectile in forward (backward) mode. The limit value is specified by setting the corresponding <em>limit</em> field.</p>\n","fields":[{"type":"pumas_medium_cb *","name":"medium","comments":"The geometry of the simulation specified as a callback. It must be\n provided by the user.\n"},{"type":"pumas_random_cb *","name":"random","comments":"The pseudo random generator of the simulation context. An\n  alternative generator can be used by overriding this callback.\n"},{"type":"struct pumas_recorder *","name":"recorder","comments":"An optionnal recorder for Monte Carlo steps. \n"},{"type":"void *","name":"user_data","comments":"A pointer to additional memory if any is requested at\n initialisation. Otherwise this points to <code>NULL</code>.\n"},{"type":"struct pumas_context_mode","name":"mode","comments":"Settings controlling the Monte Carlo transport algirithm. \n"},{"type":"enum pumas_event","name":"event","comments":"The events that stop the transport. Default is <code>PUMAS_EVENT_NONE</code>,\n i.e. the transport stops only if the particle exits the simulation\n media, or if it looses all of its energy.\n"},{"type":"struct pumas_context_limit","name":"limit","comments":"External limits for the Monte Carlo transport. \n"},{"type":"double","name":"accuracy","comments":"Tuning parameter for the accuracy of the Monte Carlo integration.\n\nThe Monte Carlo transport is discretized in elementary steps. This\n parameter directly controls the length of these steps. The smaller\n the <em>accuracy</em> value the smaller the step length. Thus, the longer\n the Monte Carlo simulation.\n"}],"block":"pumas_medium_cb * medium\npumas_random_cb * random\nstruct pumas_recorder * recorder\nvoid * user_data\nstruct pumas_context_mode mode\nenum pumas_event event\nstruct pumas_context_limit limit\ndouble accuracy","used":{"returns":[],"needs":["pumas_context_create","pumas_context_destroy","pumas_context_physics_get","pumas_context_random_dump","pumas_context_random_load","pumas_context_random_seed_get","pumas_context_random_seed_set","pumas_context_transport","pumas_medium_cb","pumas_random_cb","pumas_recorder_cb"]}}],["pumas_context_limit",{"decl":["double energy","double distance","double grammage","double time"],"type":"struct","value":"pumas_context_limit","file":"pumas.h","line":577,"lineto":589,"block":"double energy\ndouble distance\ndouble grammage\ndouble time","tdef":null,"description":" External limits for the Monte Carlo transport. ","comments":"","fields":[{"type":"double","name":"energy","comments":"The minimum kinetic energy for forward transport, or the\n maximum one for backward transport, in GeV.\n"},{"type":"double","name":"distance","comments":"The maximum travelled distance, in m. \n"},{"type":"double","name":"grammage","comments":"The maximum travelled grammage, in kg/m<sup>2.</sup> \n"},{"type":"double","name":"time","comments":"The maximum travelled proper time, in m/c. \n"}],"used":{"returns":[],"needs":[]}}],["pumas_context_mode",{"decl":["enum pumas_mode energy_loss","enum pumas_mode decay","enum pumas_mode direction","enum pumas_mode scattering"],"type":"struct","value":"pumas_context_mode","file":"pumas.h","line":549,"lineto":574,"block":"enum pumas_mode energy_loss\nenum pumas_mode decay\nenum pumas_mode direction\nenum pumas_mode scattering","tdef":null,"description":" Mode flags for the Monte Carlo transport. ","comments":"","fields":[{"type":"enum pumas_mode","name":"energy_loss","comments":"The mode used for the computation of energy losses. Default\n is <code>PUMAS_MODE_STRAGGLED</code>. Other options are <code>PUMAS_MODE_DISABLED</code>,\n <code>PUMAS_MODE_CSDA</code> and <code>PUMAS_MODE_MIXED</code>.\n"},{"type":"enum pumas_mode","name":"decay","comments":"The mode for handling decays. Default is <code>PUMAS_MODE_WEIGHTED</code>\n for a muon or <code>PUMAS_MODE_RANDOMISED</code> for a tau. Set this to\n <code>PUMAS_MODE_DISABLED</code> in order to disable decays at all.\n"},{"type":"enum pumas_mode","name":"direction","comments":"Direction of the Monte Carlo flow. Default is\n <code>PUMAS_MODE_FORWARD</code>. Set this to <code>PUMAS_MODE_BACKWARD</code> for a\n reverse Monte Carlo.\n"},{"type":"enum pumas_mode","name":"scattering","comments":"Algorithm for the simulation of the scattering. Default is\n <code>PUMAS_MODE_MIXED</code>. Other option is <code>PUMAS_MODE_DISABLED</code> which\n neglects any scattering.\n"}],"used":{"returns":[],"needs":[]}}],["pumas_event",{"decl":["PUMAS_EVENT_NONE","PUMAS_EVENT_LIMIT_ENERGY","PUMAS_EVENT_LIMIT_DISTANCE","PUMAS_EVENT_LIMIT_GRAMMAGE","PUMAS_EVENT_LIMIT_TIME","PUMAS_EVENT_LIMIT","PUMAS_EVENT_MEDIUM","PUMAS_EVENT_VERTEX_BREMSSTRAHLUNG","PUMAS_EVENT_VERTEX_PAIR_CREATION","PUMAS_EVENT_VERTEX_PHOTONUCLEAR","PUMAS_EVENT_VERTEX_DELTA_RAY","PUMAS_EVENT_VERTEX_DEL","PUMAS_EVENT_VERTEX_COULOMB","PUMAS_EVENT_VERTEX_DECAY","PUMAS_EVENT_VERTEX","PUMAS_EVENT_WEIGHT","PUMAS_EVENT_START","PUMAS_EVENT_STOP"],"type":"enum","file":"pumas.h","line":194,"lineto":231,"block":"PUMAS_EVENT_NONE\nPUMAS_EVENT_LIMIT_ENERGY\nPUMAS_EVENT_LIMIT_DISTANCE\nPUMAS_EVENT_LIMIT_GRAMMAGE\nPUMAS_EVENT_LIMIT_TIME\nPUMAS_EVENT_LIMIT\nPUMAS_EVENT_MEDIUM\nPUMAS_EVENT_VERTEX_BREMSSTRAHLUNG\nPUMAS_EVENT_VERTEX_PAIR_CREATION\nPUMAS_EVENT_VERTEX_PHOTONUCLEAR\nPUMAS_EVENT_VERTEX_DELTA_RAY\nPUMAS_EVENT_VERTEX_DEL\nPUMAS_EVENT_VERTEX_COULOMB\nPUMAS_EVENT_VERTEX_DECAY\nPUMAS_EVENT_VERTEX\nPUMAS_EVENT_WEIGHT\nPUMAS_EVENT_START\nPUMAS_EVENT_STOP","tdef":null,"description":" Flags for transport events. ","comments":"","fields":[{"type":"int","name":"PUMAS_EVENT_NONE","comments":"<p class=\"longComment\">No event occured or is foreseen. </p>\n","value":0},{"type":"int","name":"PUMAS_EVENT_LIMIT_ENERGY","comments":"<p class=\"longComment\">A kinetic energy limit was reached or is foreseen. </p>\n","value":1},{"type":"int","name":"PUMAS_EVENT_LIMIT_DISTANCE","comments":"<p class=\"longComment\">A distance limit was reached or is foreseen. </p>\n","value":2},{"type":"int","name":"PUMAS_EVENT_LIMIT_GRAMMAGE","comments":"<p class=\"longComment\">A grammage limit was reached or is foreseen. </p>\n","value":4},{"type":"int","name":"PUMAS_EVENT_LIMIT_TIME","comments":"<p class=\"longComment\">A proper time limit was reached or is foreseen. </p>\n","value":8},{"type":"int","name":"PUMAS_EVENT_LIMIT","comments":"<p class=\"longComment\">Shortcut for any external limit. </p>\n","value":15},{"type":"int","name":"PUMAS_EVENT_MEDIUM","comments":"<p class=\"longComment\">A change of medium occured or is foreseen. </p>\n","value":16},{"type":"int","name":"PUMAS_EVENT_VERTEX_BREMSSTRAHLUNG","comments":"<p class=\"longComment\">A Bremsstrahlung occured or is foreseen. </p>\n","value":32},{"type":"int","name":"PUMAS_EVENT_VERTEX_PAIR_CREATION","comments":"<p class=\"longComment\">A Pair creation occured or is foreseen. </p>\n","value":64},{"type":"int","name":"PUMAS_EVENT_VERTEX_PHOTONUCLEAR","comments":"<p class=\"longComment\">A Photonuclear interaction occured or is foreseen. </p>\n","value":128},{"type":"int","name":"PUMAS_EVENT_VERTEX_DELTA_RAY","comments":"<p class=\"longComment\">A Delta ray occured or is foreseen. </p>\n","value":256},{"type":"int","name":"PUMAS_EVENT_VERTEX_DEL","comments":"<p class=\"longComment\">Shortcut for any Discrete Energy Loss (DEL). </p>\n","value":480},{"type":"int","name":"PUMAS_EVENT_VERTEX_COULOMB","comments":"<p class=\"longComment\">A hard Coulombian interaction occured or is foreseen. </p>\n","value":512},{"type":"int","name":"PUMAS_EVENT_VERTEX_DECAY","comments":"<p class=\"longComment\">A decay has occured or is foreseen. </p>\n","value":1024},{"type":"int","name":"PUMAS_EVENT_VERTEX","comments":"<p class=\"longComment\">Shortcut for any interaction vertex. </p>\n","value":2016},{"type":"int","name":"PUMAS_EVENT_WEIGHT","comments":"<p class=\"longComment\">The particle has a nul or negative weight. </p>\n","value":2048},{"type":"int","name":"PUMAS_EVENT_START","comments":"<p class=\"longComment\">Extra flag for records tagging the first transport step. </p>\n","value":4096},{"type":"int","name":"PUMAS_EVENT_STOP","comments":"<p class=\"longComment\">Extra flag for records tagging the last transport step. </p>\n","value":8192}],"used":{"returns":[],"needs":["pumas_context_transport","pumas_recorder_cb"]}}],["pumas_frame",{"decl":["struct pumas_state state","struct pumas_medium * medium","enum pumas_event event","struct pumas_frame * next"],"type":"struct","value":"pumas_frame","file":"pumas.h","line":381,"lineto":390,"block":"struct pumas_state state\nstruct pumas_medium * medium\nenum pumas_event event\nstruct pumas_frame * next","tdef":null,"description":" A recorded Monte-Carlo frame.","comments":"<p class=\"longComment\">This structure exposes data relative to a recorded Monte Carlo frame.  It is not meant to be modified by the user.</p>\n\n<p class=\"longComment\">See the <a href=\"./#v1.2/type/pumas_recorder\">pumas_recorder</a> structure for more information on recording Monte Carlo steps.</p>\n","fields":[{"type":"struct pumas_state","name":"state","comments":"The recorded Monte Carlo state. \n"},{"type":"struct pumas_medium *","name":"medium","comments":"The corresponding target medium. \n"},{"type":"enum pumas_event","name":"event","comments":"The corresponding Monte Carlo event. \n"},{"type":"struct pumas_frame *","name":"next","comments":"Link to the next frame in the record. \n"}],"used":{"returns":[],"needs":[]}}],["pumas_locals",{"decl":["double density","double [3] magnet"],"type":"struct","value":"pumas_locals","file":"pumas.h","line":309,"lineto":316,"block":"double density\ndouble [3] magnet","tdef":null,"description":" The local properties of a propagation medium.","comments":"","fields":[{"type":"double","name":"density","comments":"The material local density, in kg/m<sup>3.</sup> Setting a null or negative\n value results in the material&#39;s default density being used.\n"},{"type":"double [3]","name":"magnet","comments":"The local magnetic field components, in T. \n"}],"used":{"returns":[],"needs":["pumas_locals_cb"]}}],["pumas_medium",{"decl":["int material","pumas_locals_cb * locals"],"type":"struct","value":"pumas_medium","file":"pumas.h","line":358,"lineto":371,"tdef":null,"description":" Description of a propagation medium.","comments":"<p class=\"longComment\">A propagation medium is fully defined by:</p>\n\n<ul>\n<li><p class=\"longComment\">a <em>material</em> composition with a constant relative content.</p></li>\n<li><p class=\"longComment\">Optionally, local properties set by a <a href=\"./#v1.2/group/callback/pumas_locals_cb\">pumas_locals_cb</a> callback.</p></li>\n</ul>\n\n<p class=\"longComment\"><strong>Note</strong>: this structure might be wrapped (sub-classed) in a larger one by the user.</p>\n","fields":[{"type":"int","name":"material","comments":"The material index in the Material Description File (MDF). It can be\n mapped to the corresponding name with the\n <a href=\"./#v1.2/group/physics/pumas_physics_material_name\">pumas_physics_material_name</a> function.\n"},{"type":"pumas_locals_cb *","name":"locals","comments":"The user supplied callback for setting the medium local properties.\n Setting a <code>NULL</code> callback results in the material&#39;s default density\n being used with no magnetic field.\n"}],"block":"int material\npumas_locals_cb * locals","used":{"returns":[],"needs":["pumas_context_transport","pumas_locals_cb","pumas_medium_cb","pumas_recorder_cb"]}}],["pumas_mode",{"decl":["PUMAS_MODE_DISABLED","PUMAS_MODE_CSDA","PUMAS_MODE_MIXED","PUMAS_MODE_STRAGGLED","PUMAS_MODE_WEIGHTED","PUMAS_MODE_RANDOMISED","PUMAS_MODE_FORWARD","PUMAS_MODE_BACKWARD"],"type":"enum","file":"pumas.h","line":85,"lineto":135,"block":"PUMAS_MODE_DISABLED\nPUMAS_MODE_CSDA\nPUMAS_MODE_MIXED\nPUMAS_MODE_STRAGGLED\nPUMAS_MODE_WEIGHTED\nPUMAS_MODE_RANDOMISED\nPUMAS_MODE_FORWARD\nPUMAS_MODE_BACKWARD","tdef":null,"description":" Modes for the Monte Carlo transport.","comments":"","fields":[{"type":"int","name":"PUMAS_MODE_DISABLED","comments":"<p class=\"longComment\">The simulation of the corresponding property is disabled.</p>\n\n<p class=\"longComment\"><strong>Note</strong> : When running without energy losses a distance / grammage\n limit must be defined or geometry callback provided.</p>\n\n<p class=\"longComment\"><strong>Note</strong> : When scattering is disabled, charged particles are still\n deflected by external electromagnetic fields.</p>\n","value":-1},{"type":"int","name":"PUMAS_MODE_CSDA","comments":"<p class=\"longComment\">Energy losses are purely determinstic as given by the Continuously\n Slowing Down Approximation (CSDA).</p>\n","value":0},{"type":"int","name":"PUMAS_MODE_MIXED","comments":"<p class=\"longComment\">Energy losses or scattering are simulated using a mixed (class II)\n Monte-Carlo algorithm with a split between soft and hard collisions.</p>\n","value":1},{"type":"int","name":"PUMAS_MODE_STRAGGLED","comments":"<p class=\"longComment\">In addition to the mixed algorithm, the energy loss due to soft\n electronic collisions is straggled.</p>\n","value":2},{"type":"int","name":"PUMAS_MODE_WEIGHTED","comments":"<p class=\"longComment\">Decays are accounted for by a weight factor. This is efficient\n for muons but irrelevant -numerically instable- for the forward\n transport of taus since they decay in flight. Hence this mode is\n not allowed in the latter case.</p>\n","value":0},{"type":"int","name":"PUMAS_MODE_RANDOMISED","comments":"<p class=\"longComment\">Decay vertices are randomised as a specific Monte-Carlo process.</p>\n\n<p class=\"longComment\"><strong>Note</strong> : the transported particle stops at the decay vertex but\n its decay is not simulated, i.e. no daughter particles are\n generated.</p>\n","value":1},{"type":"int","name":"PUMAS_MODE_FORWARD","comments":"<p class=\"longComment\">Do a forward Monte Carlo transport.</p>\n\n<p class=\"longComment\"><strong>Note</strong> : the forward Monte Carlo transport is analog, i.e.\n unweighted. However, if the decay mode is set to\n <code>PUMAS_MODE_WEIGHTED</code> then the particle weight is updated\n accordingly.</p>\n","value":0},{"type":"int","name":"PUMAS_MODE_BACKWARD","comments":"<p class=\"longComment\">Do a backward Monte Carlo transport.</p>\n\n<p class=\"longComment\"><strong>Note</strong> : the backward Monte Carlo transport is <strong>not</strong> analog. I.e.\n the transported particle is weighted.</p>\n","value":1}],"used":{"returns":[],"needs":["pumas_physics_property_kinetic_energy","pumas_physics_property_proper_time","pumas_physics_property_range","pumas_physics_property_stopping_power","pumas_physics_property_transport_path","pumas_physics_table_index","pumas_physics_table_value"]}}],["pumas_particle",{"decl":["PUMAS_PARTICLE_MUON","PUMAS_PARTICLE_TAU"],"type":"enum","file":"pumas.h","line":40,"lineto":45,"block":"PUMAS_PARTICLE_MUON\nPUMAS_PARTICLE_TAU","tdef":null,"description":" Projectiles supported by PUMAS.","comments":"","fields":[{"type":"int","name":"PUMAS_PARTICLE_MUON","comments":"<p class=\"longComment\">The muon or anti-muon lepton. </p>\n","value":0},{"type":"int","name":"PUMAS_PARTICLE_TAU","comments":"<p class=\"longComment\">The tau or anti-tau lepton. </p>\n","value":1}],"used":{"returns":[],"needs":["pumas_physics_create","pumas_physics_particle"]}}],["pumas_physics",{"decl":[],"type":"struct","value":"pumas_physics","file":"pumas.h","line":693,"lineto":693,"tdef":null,"description":" Physics tables for the Monte Carlo transport","comments":"<p class=\"longComment\">This is an <strong>opaque</strong> structure wrapping physics tables for the Monte Carlo transport.  See <a href=\"./#v1.2/group/physics/pumas_physics_create\">pumas_physics_create</a> for informations on how to create a physics object.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: the physics is configured during its instantiation. It cannot be modified afterwards. Only the composition of composite materials can be updated with the <a href=\"./#v1.2/group/physics/pumas_physics_composite_update\">pumas_physics_composite_update</a> function.</p>\n\n<p class=\"longComment\">The settings of a <code>pumas_physics</code> instance can be inspected with the <a href=\"./#v1.2/group/physics/pumas_physics_cutoff\">pumas_physics_cutoff</a>, <a href=\"./#v1.2/group/physics/pumas_physics_dcs\">pumas_physics_dcs</a> and <a href=\"./#v1.2/group/physics/pumas_physics_elastic_ratio\">pumas_physics_elastic_ratio</a> functions. The materials data are retrieved with the <code>pumas_physics_element_*</code>, and <code>pumas_physics_material_*</code> functions. Alternatively, the <a href=\"./#v1.2/group/physics/pumas_physics_print\">pumas_physics_print</a> function can be used in order to print out a human readable summary of the physics.</p>\n\n<p class=\"longComment\">Physics properties are tabulated as function of the projectile kinetic energy.  The tabulated values can be retrieved with the <a href=\"./#v1.2/group/physics/pumas_physics_table_value\">pumas_physics_table_value</a> function. In addition, the <code>pumas_physics_property_*</code> functions provide smooth interpolations of physics properties for arbitrary kinetic energy values.</p>\n","fields":[],"used":{"returns":["pumas_context_physics_get"],"needs":["pumas_context_create","pumas_physics_composite_length","pumas_physics_composite_properties","pumas_physics_composite_update","pumas_physics_create","pumas_physics_cutoff","pumas_physics_dcs","pumas_physics_destroy","pumas_physics_dump","pumas_physics_elastic_ratio","pumas_physics_element_index","pumas_physics_element_length","pumas_physics_element_name","pumas_physics_element_properties","pumas_physics_load","pumas_physics_material_index","pumas_physics_material_length","pumas_physics_material_name","pumas_physics_material_properties","pumas_physics_particle","pumas_physics_print","pumas_physics_property_cross_section","pumas_physics_property_elastic_cutoff_angle","pumas_physics_property_elastic_path","pumas_physics_property_energy_straggling","pumas_physics_property_kinetic_energy","pumas_physics_property_magnetic_rotation","pumas_physics_property_proper_time","pumas_physics_property_range","pumas_physics_property_stopping_power","pumas_physics_property_transport_path","pumas_physics_table_index","pumas_physics_table_length","pumas_physics_table_value"]}}],["pumas_physics_settings",{"decl":["double cutoff","double elastic_ratio","const char * bremsstrahlung","const char * pair_production","const char * photonuclear","int n_energies","double * energy","int update","int dry"],"type":"struct","value":"pumas_physics_settings","file":"pumas.h","line":716,"lineto":810,"block":"double cutoff\ndouble elastic_ratio\nconst char * bremsstrahlung\nconst char * pair_production\nconst char * photonuclear\nint n_energies\ndouble * energy\nint update\nint dry","tdef":null,"description":" ","comments":"","fields":[{"type":"double","name":"cutoff","comments":"Relative cutoff between soft and hard energy losses.\n\nSetting a null or negative value results in the default cutoff value\n to be used i.e. 5% which is a good compromise between speed and\n accuracy for transporting a continuous spectrumm, see e.g.  <a href=\"https://doi.org/10.1103/PhysRevD.64.074015\">Sokalski\n et al.</a>\n\n<strong>Warning</strong> : In backward mode, with mixed or straggled energy loss,\n cutoff values lower than 1% are not currently supported.\n"},{"type":"double","name":"elastic_ratio","comments":"Ratio of the mean free path for hard elastic events to the smallest\n of the transport mean free path or CSDA range.\n\nThe lower the ratio the more detailed the simulation of elastic\n scattering, see e.g. <a href=\"https://doi.org/10.1016/0168-583X(93)95827-R\">Fernandez-Varea et al. (1993)</a>  Setting a null or\n negative value results in the default ratio to be used i.e. 5%.\n"},{"type":"const char *","name":"bremsstrahlung","comments":"Physics model for the Bremsstrahlung process.\n\nAvailable models are:\n\n<ul>\n<li><code>ABB</code>: Andreev, Bezrukov and Bugaev, Physics of Atomic Nuclei 57\n       (1994) 2066.</li>\n<li><code>KKP</code>: Kelner, Kokoulin and Petrukhin, Moscow Engineering Physics\n       Inst., Moscow, 1995.</li>\n<li><code>SSR</code>: Sandrock, Soedingresko and Rhode, <a href=\"https://arxiv.org/abs/1910.07050\">ICRC 2019</a>.</li>\n</ul>\n\nSetting a <code>NULL</code> value results in PUMAS default Bremsstrahlung model\n to be used, i.e. <code>SSR</code>.\n"},{"type":"const char *","name":"pair_production","comments":"Physics model for e<sup>+</sup>e<sup>-</sup> pair production.\n\nAvailable models are:\n\n<ul>\n<li><code>KKP</code>: Kelner, Kokoulin and Petrukhin, Soviet Journal of Nuclear\n       Physics 7 (1968) 237.</li>\n<li><code>SSR</code>: Sandrock, Soedingresko and Rhode, <a href=\"https://arxiv.org/abs/1910.07050\">ICRC 2019</a>.</li>\n</ul>\n\nSetting a <code>NULL</code> value results in PUMAS default pair production model\n to be used, i.e. <code>SSR</code>.\n"},{"type":"const char *","name":"photonuclear","comments":"Physics model for photonuclear interactions.\n\nAvailable models are:\n\n<ul>\n<li><code>BBKS</code>: Bezrukov, Bugaev, Sov. J. Nucl. Phys. 33 (1981), 635.\n        with improved photon-nucleon cross-section according to\n        <a href=\"https://doi.org/10.1016/S0920-5632(98)00475-7\">Kokoulin</a>\n        and hard component from <a href=\"https://doi.org/10.1103/PhysRevD.67.034027\">Bugaev and Shlepin</a>.</li>\n<li><code>BM</code>  : Butkevich and Mikheyev, Soviet Journal of Experimental and\n        Theoretical Physics 95 (2002) 11.</li>\n<li><code>DRSS</code>: Dutta, Reno, Sarcevic and Seckel, <a href=\"https://arxiv.org/abs/hep-ph/0012350\">Phys.Rev. D63 (2001)\n        094020</a>.</li>\n</ul>\n\nSetting a <code>NULL</code> value results in PUMAS default photonuclear model to\n be used, i.e. <code>DRSS</code>.\n"},{"type":"int","name":"n_energies","comments":"The number of kinetic energy values to tabulate. Providing a value\n of zero or less results in the PDG energy grid being used.\n"},{"type":"double *","name":"energy","comments":"Array of kinetic energy values to tabulate. Providing a <code>NULL</code>\n value results in the PDG energy grid being used.\n"},{"type":"int","name":"update","comments":"Flag to force updating existing stopping power table(s). The default\n behaviour is to not overwrite any already existing file.\n"},{"type":"int","name":"dry","comments":"Flag to enable dry mode.\n\nIn dry mode energy loss files are generated but the physics is\n not created. This is usefull e.g. if only energy loss files are\n needed as a speed up.\n\n<strong>Warning</strong>: in dry mode no physics is returned, i.e. the <em>physics</em>\n pointer provided by <a href=\"./#v1.2/group/physics/pumas_physics_create\">pumas_physics_create</a> points to <code>NULL</code>.\n"}],"used":{"returns":[],"needs":["pumas_physics_create"]}}],["pumas_process",{"decl":["PUMAS_PROCESS_BREMSSTRAHLUNG","PUMAS_PROCESS_PAIR_PRODUCTION","PUMAS_PROCESS_PHOTONUCLEAR"],"type":"enum","file":"pumas.h","line":234,"lineto":241,"block":"PUMAS_PROCESS_BREMSSTRAHLUNG\nPUMAS_PROCESS_PAIR_PRODUCTION\nPUMAS_PROCESS_PHOTONUCLEAR","tdef":null,"description":" Radiative processes available in PUMAS. ","comments":"","fields":[{"type":"int","name":"PUMAS_PROCESS_BREMSSTRAHLUNG","comments":"<p class=\"longComment\">The Bremstrahlung process </p>\n","value":0},{"type":"int","name":"PUMAS_PROCESS_PAIR_PRODUCTION","comments":"<p class=\"longComment\">The e+e- pair production process </p>\n","value":1},{"type":"int","name":"PUMAS_PROCESS_PHOTONUCLEAR","comments":"<p class=\"longComment\">The photonuclear process </p>\n","value":2}],"used":{"returns":[],"needs":["pumas_dcs_default","pumas_dcs_get","pumas_dcs_range","pumas_dcs_register","pumas_physics_dcs"]}}],["pumas_property",{"decl":["PUMAS_PROPERTY_CROSS_SECTION","PUMAS_PROPERTY_ELASTIC_CUTOFF_ANGLE","PUMAS_PROPERTY_ELASTIC_PATH","PUMAS_PROPERTY_STOPPING_POWER","PUMAS_PROPERTY_RANGE","PUMAS_PROPERTY_KINETIC_ENERGY","PUMAS_PROPERTY_MAGNETIC_ROTATION","PUMAS_PROPERTY_TRANSPORT_PATH","PUMAS_PROPERTY_PROPER_TIME"],"type":"enum","file":"pumas.h","line":50,"lineto":80,"block":"PUMAS_PROPERTY_CROSS_SECTION\nPUMAS_PROPERTY_ELASTIC_CUTOFF_ANGLE\nPUMAS_PROPERTY_ELASTIC_PATH\nPUMAS_PROPERTY_STOPPING_POWER\nPUMAS_PROPERTY_RANGE\nPUMAS_PROPERTY_KINETIC_ENERGY\nPUMAS_PROPERTY_MAGNETIC_ROTATION\nPUMAS_PROPERTY_TRANSPORT_PATH\nPUMAS_PROPERTY_PROPER_TIME","tdef":null,"description":" Physics properties tabulated by PUMAS.","comments":"","fields":[{"type":"int","name":"PUMAS_PROPERTY_CROSS_SECTION","comments":"<p class=\"longComment\">The restricted cross-section for inelastic and radiative\n processes, in m<sup>2</sup>/kg.</p>\n","value":0},{"type":"int","name":"PUMAS_PROPERTY_ELASTIC_CUTOFF_ANGLE","comments":"<p class=\"longComment\">Cutoff angle for hard elastic events in the center of mass frame,\n in rad.</p>\n","value":1},{"type":"int","name":"PUMAS_PROPERTY_ELASTIC_PATH","comments":"<p class=\"longComment\">The mean free path for hard elastic (Coulomb) collisions,\n in kg/m<sup>2</sup>.</p>\n","value":2},{"type":"int","name":"PUMAS_PROPERTY_STOPPING_POWER","comments":"<p class=\"longComment\">The material stopping power, in GeV/(kg/m<sup>2</sup>). </p>\n","value":3},{"type":"int","name":"PUMAS_PROPERTY_RANGE","comments":"<p class=\"longComment\">The particle grammage range, in kg/m<sup>2</sup>. </p>\n","value":4},{"type":"int","name":"PUMAS_PROPERTY_KINETIC_ENERGY","comments":"<p class=\"longComment\">The particle kinetic energy, in GeV. </p>\n","value":5},{"type":"int","name":"PUMAS_PROPERTY_MAGNETIC_ROTATION","comments":"<p class=\"longComment\">The total magnetic rotation angle, in rad kg/m<sup>3</sup>. </p>\n","value":6},{"type":"int","name":"PUMAS_PROPERTY_TRANSPORT_PATH","comments":"<p class=\"longComment\">The transport mean free path for soft processes, in kg/m<sup>2</sup>.</p>\n","value":7},{"type":"int","name":"PUMAS_PROPERTY_PROPER_TIME","comments":"<p class=\"longComment\">The particle proper time, in kg/m<sup>2</sup>. </p>\n","value":8}],"used":{"returns":[],"needs":["pumas_physics_table_index","pumas_physics_table_value"]}}],["pumas_recorder",{"decl":["struct pumas_frame * first","int length","int period","pumas_recorder_cb * record","void * user_data"],"type":"struct","value":"pumas_recorder","file":"pumas.h","line":427,"lineto":453,"block":"struct pumas_frame * first\nint length\nint period\npumas_recorder_cb * record\nvoid * user_data","tdef":null,"description":" A Monte-Carlo recorder.","comments":"<p class=\"longComment\">This structure is used for recording Monte Carlo steps and/or accessing them. Although it exposes some public data that the user may alter it also encloses other opaque data. Therefore, it <strong>must</strong> be handled with the <a href=\"./#v1.2/group/recorder/pumas_recorder_create\">pumas_recorder_create</a>, <a href=\"./#v1.2/group/recorder/pumas_recorder_clear\">pumas_recorder_clear</a> and <a href=\"./#v1.2/group/recorder/pumas_recorder_destroy\">pumas_recorder_destroy</a> functions.</p>\n\n<p class=\"longComment\">By default a newly created recorder is configured for saving all Monte Carlo steps as <a href=\"./#v1.2/type/pumas_frame\">pumas_frame</a> objects. This behaviour can be modified by setting a <a href=\"./#v1.2/group/callback/pumas_recorder_cb\">pumas_recorder_cb</a> callback as <em>record</em> field. Other attributes of the structure control the sampling rate of Monte Carlo steps and allow to access the sampled <a href=\"./#v1.2/type/pumas_frame\">pumas_frame</a>, as detailed herein.</p>\n\n<p class=\"longComment\"><strong>Note</strong> : A recorder is enabled (disabled) by setting (unsetting) it to (from) the <em>recorder</em> field of a <a href=\"./#v1.2/type/pumas_context\">pumas_context</a>. Only the corresponding context is recorded.</p>\n","fields":[{"type":"struct pumas_frame *","name":"first","comments":"Link to the 1<sup>st</sup> recorded frame or <code>NULL</code> if none. This field\n should not be modified.\n"},{"type":"int","name":"length","comments":"The total number of recorded frames. This field should not be\n modified.\n"},{"type":"int","name":"period","comments":"The sampling period of the recorder. If set to zero or less only\n medium changes and user specified events are recorded. Defaults to 1,\n i.e. all Monte-Carlo steps are recorded.\n"},{"type":"pumas_recorder_cb *","name":"record","comments":"Link to an external (user supplied) recording callback. Note that\n setting this value disables the in-memory frame recording. Defaults\n to <code>NULL</code>.\n"},{"type":"void *","name":"user_data","comments":"A pointer to additional memory, if any is requested at\n initialisation.\n"}],"used":{"returns":[],"needs":["pumas_recorder_clear","pumas_recorder_create","pumas_recorder_destroy"]}}],["pumas_return",{"decl":["PUMAS_RETURN_SUCCESS","PUMAS_RETURN_ACCURACY_ERROR","PUMAS_RETURN_END_OF_FILE","PUMAS_RETURN_DECAY_ERROR","PUMAS_RETURN_DENSITY_ERROR","PUMAS_RETURN_DIRECTION_ERROR","PUMAS_RETURN_INCOMPLETE_FILE","PUMAS_RETURN_INDEX_ERROR","PUMAS_RETURN_PHYSICS_ERROR","PUMAS_RETURN_INTERNAL_ERROR","PUMAS_RETURN_IO_ERROR","PUMAS_RETURN_FORMAT_ERROR","PUMAS_RETURN_MEDIUM_ERROR","PUMAS_RETURN_MEMORY_ERROR","PUMAS_RETURN_MODEL_ERROR","PUMAS_RETURN_MISSING_LIMIT","PUMAS_RETURN_MISSING_RANDOM","PUMAS_RETURN_PATH_ERROR","PUMAS_RETURN_RAISE_ERROR","PUMAS_RETURN_TOO_LONG","PUMAS_RETURN_UNDEFINED_MDF","PUMAS_RETURN_UNKNOWN_ELEMENT","PUMAS_RETURN_UNKNOWN_MATERIAL","PUMAS_RETURN_UNKNOWN_PARTICLE","PUMAS_RETURN_VALUE_ERROR","PUMAS_N_RETURNS"],"type":"enum","file":"pumas.h","line":138,"lineto":191,"block":"PUMAS_RETURN_SUCCESS\nPUMAS_RETURN_ACCURACY_ERROR\nPUMAS_RETURN_END_OF_FILE\nPUMAS_RETURN_DECAY_ERROR\nPUMAS_RETURN_DENSITY_ERROR\nPUMAS_RETURN_DIRECTION_ERROR\nPUMAS_RETURN_INCOMPLETE_FILE\nPUMAS_RETURN_INDEX_ERROR\nPUMAS_RETURN_PHYSICS_ERROR\nPUMAS_RETURN_INTERNAL_ERROR\nPUMAS_RETURN_IO_ERROR\nPUMAS_RETURN_FORMAT_ERROR\nPUMAS_RETURN_MEDIUM_ERROR\nPUMAS_RETURN_MEMORY_ERROR\nPUMAS_RETURN_MODEL_ERROR\nPUMAS_RETURN_MISSING_LIMIT\nPUMAS_RETURN_MISSING_RANDOM\nPUMAS_RETURN_PATH_ERROR\nPUMAS_RETURN_RAISE_ERROR\nPUMAS_RETURN_TOO_LONG\nPUMAS_RETURN_UNDEFINED_MDF\nPUMAS_RETURN_UNKNOWN_ELEMENT\nPUMAS_RETURN_UNKNOWN_MATERIAL\nPUMAS_RETURN_UNKNOWN_PARTICLE\nPUMAS_RETURN_VALUE_ERROR\nPUMAS_N_RETURNS","tdef":null,"description":" Return codes for the API functions. ","comments":"","fields":[{"type":"int","name":"PUMAS_RETURN_SUCCESS","comments":"<p class=\"longComment\">Execution was successful. </p>\n","value":0},{"type":"int","name":"PUMAS_RETURN_ACCURACY_ERROR","comments":"<p class=\"longComment\">The requested accuracy is not valid. </p>\n","value":1},{"type":"int","name":"PUMAS_RETURN_END_OF_FILE","comments":"<p class=\"longComment\">End of file was reached. </p>\n","value":2},{"type":"int","name":"PUMAS_RETURN_DECAY_ERROR","comments":"<p class=\"longComment\">The specified decay mode is not valid. </p>\n","value":3},{"type":"int","name":"PUMAS_RETURN_DENSITY_ERROR","comments":"<p class=\"longComment\">Some medium has a wrong density value. </p>\n","value":4},{"type":"int","name":"PUMAS_RETURN_DIRECTION_ERROR","comments":"<p class=\"longComment\">Some medium has a wrong density value. </p>\n","value":5},{"type":"int","name":"PUMAS_RETURN_INCOMPLETE_FILE","comments":"<p class=\"longComment\">A non unit direction is provided. </p>\n","value":6},{"type":"int","name":"PUMAS_RETURN_INDEX_ERROR","comments":"<p class=\"longComment\">Some index is out of validity range. </p>\n","value":7},{"type":"int","name":"PUMAS_RETURN_PHYSICS_ERROR","comments":"<p class=\"longComment\">The physics is not initialised or a NULL pointer was provided. </p>\n","value":8},{"type":"int","name":"PUMAS_RETURN_INTERNAL_ERROR","comments":"<p class=\"longComment\">An internal library error occured. </p>\n","value":9},{"type":"int","name":"PUMAS_RETURN_IO_ERROR","comments":"<p class=\"longComment\">Some read /write error occured. </p>\n","value":10},{"type":"int","name":"PUMAS_RETURN_FORMAT_ERROR","comments":"<p class=\"longComment\">Some file is badly formated. </p>\n","value":11},{"type":"int","name":"PUMAS_RETURN_MEDIUM_ERROR","comments":"<p class=\"longComment\">Wrong propagation medium. </p>\n","value":12},{"type":"int","name":"PUMAS_RETURN_MEMORY_ERROR","comments":"<p class=\"longComment\">Some memory could not be allocated. </p>\n","value":13},{"type":"int","name":"PUMAS_RETURN_MODEL_ERROR","comments":"<p class=\"longComment\">An invalid (unknown) DCS model was requested. </p>\n","value":14},{"type":"int","name":"PUMAS_RETURN_MISSING_LIMIT","comments":"<p class=\"longComment\">A user supplied limit is required. </p>\n","value":15},{"type":"int","name":"PUMAS_RETURN_MISSING_RANDOM","comments":"<p class=\"longComment\">The random callback is not defined. </p>\n","value":16},{"type":"int","name":"PUMAS_RETURN_PATH_ERROR","comments":"<p class=\"longComment\">Some file could not be found. </p>\n","value":17},{"type":"int","name":"PUMAS_RETURN_RAISE_ERROR","comments":"<p class=\"longComment\">A raise was called without any catch. </p>\n","value":18},{"type":"int","name":"PUMAS_RETURN_TOO_LONG","comments":"<p class=\"longComment\">Some input string is too long. </p>\n","value":19},{"type":"int","name":"PUMAS_RETURN_UNDEFINED_MDF","comments":"<p class=\"longComment\">No MDF file specified. </p>\n","value":20},{"type":"int","name":"PUMAS_RETURN_UNKNOWN_ELEMENT","comments":"<p class=\"longComment\">An unkwon element was specified. </p>\n","value":21},{"type":"int","name":"PUMAS_RETURN_UNKNOWN_MATERIAL","comments":"<p class=\"longComment\">An unkwon material was specified. </p>\n","value":22},{"type":"int","name":"PUMAS_RETURN_UNKNOWN_PARTICLE","comments":"<p class=\"longComment\">The particle type is not known. </p>\n","value":23},{"type":"int","name":"PUMAS_RETURN_VALUE_ERROR","comments":"<p class=\"longComment\">Some input value is not valid. </p>\n","value":24},{"type":"int","name":"PUMAS_N_RETURNS","comments":"<p class=\"longComment\">The number of PUMAS return codes.  </p>\n","value":25}],"used":{"returns":["pumas_constant","pumas_context_create","pumas_context_random_dump","pumas_context_random_load","pumas_context_random_seed_get","pumas_context_random_seed_set","pumas_context_transport","pumas_dcs_get","pumas_dcs_range","pumas_dcs_register","pumas_error_raise","pumas_physics_composite_properties","pumas_physics_composite_update","pumas_physics_create","pumas_physics_dcs","pumas_physics_dump","pumas_physics_element_index","pumas_physics_element_name","pumas_physics_element_properties","pumas_physics_load","pumas_physics_material_index","pumas_physics_material_name","pumas_physics_material_properties","pumas_physics_particle","pumas_physics_print","pumas_physics_property_cross_section","pumas_physics_property_elastic_cutoff_angle","pumas_physics_property_elastic_path","pumas_physics_property_energy_straggling","pumas_physics_property_kinetic_energy","pumas_physics_property_magnetic_rotation","pumas_physics_property_proper_time","pumas_physics_property_range","pumas_physics_property_stopping_power","pumas_physics_property_transport_path","pumas_physics_table_index","pumas_physics_table_value","pumas_recorder_create"],"needs":["pumas_handler_cb"]}}],["pumas_state",{"decl":["double charge","double energy","double distance","double grammage","double time","double weight","double [3] position","double [3] direction","int decayed"],"type":"struct","value":"pumas_state","file":"pumas.h","line":284,"lineto":304,"block":"double charge\ndouble energy\ndouble distance\ndouble grammage\ndouble time\ndouble weight\ndouble [3] position\ndouble [3] direction\nint decayed","tdef":null,"description":" Container for a Monte-Carlo state.","comments":"<p class=\"longComment\">This structure contains data defining a particle Monte Carlo state. It must be directly instancianted by the user.</p>\n\n<p class=\"longComment\"><strong>Note</strong>: this structure might be wrapped (sub-classed) in a larger one by the user.</p>\n","fields":[{"type":"double","name":"charge","comments":"The particle&#39;s electric charge. Note that non physical values,\n i.e. different from 1 or -1, could be set. \n"},{"type":"double","name":"energy","comments":"The current kinetic energy, in GeV. \n"},{"type":"double","name":"distance","comments":"The total travelled distance, in m. \n"},{"type":"double","name":"grammage","comments":"The total travelled grammage, in kg/m<sup>2.</sup> \n"},{"type":"double","name":"time","comments":"The particle&#39;s proper time, in m/c. \n"},{"type":"double","name":"weight","comments":"The Monte-Carlo weight. \n"},{"type":"double [3]","name":"position","comments":"The absolute location, in m. \n"},{"type":"double [3]","name":"direction","comments":"The momentum&#39;s unit direction. Must be normalised to one. \n"},{"type":"int","name":"decayed","comments":"Status flag telling if the particle has decayed or not.  \n"}],"used":{"returns":[],"needs":["pumas_context_transport","pumas_locals_cb","pumas_medium_cb","pumas_recorder_cb"]}}],["pumas_step",{"decl":["PUMAS_STEP_CHECK","PUMAS_STEP_RAW"],"type":"enum","file":"pumas.h","line":456,"lineto":470,"block":"PUMAS_STEP_CHECK\nPUMAS_STEP_RAW","tdef":null,"description":" Return codes for the medium callback. ","comments":"","fields":[{"type":"int","name":"PUMAS_STEP_CHECK","comments":"<p class=\"longComment\">The proposed step is cross-checked by PUMAS beforehand.</p>\n\n<p class=\"longComment\">This is the safest option. Use this mode if you are unsure about\n the compatibility of your geometry ray tracer with PUMAS.</p>\n","value":0},{"type":"int","name":"PUMAS_STEP_RAW","comments":"<p class=\"longComment\">The proposed step is used by PUMAS as is.</p>\n\n<p class=\"longComment\">This mode is intended for expert usage. Depending on the geometry ray\n tracer used, it can save PUMAS from performing some redundant\n geometry checks.</p>\n","value":1}],"used":{"returns":["pumas_medium_cb"],"needs":[]}}]],"prefix":"include","groups":[["context",["pumas_context_create","pumas_context_destroy","pumas_context_physics_get","pumas_context_random_dump","pumas_context_random_load","pumas_context_random_seed_get","pumas_context_random_seed_set","pumas_context_transport"]],["dcs",["pumas_dcs_default","pumas_dcs_get","pumas_dcs_range","pumas_dcs_register"]],["elastic",["pumas_elastic_dcs","pumas_elastic_path"]],["electronic",["pumas_electronic_dcs","pumas_electronic_density_effect","pumas_electronic_stopping_power"]],["error",["pumas_error_catch","pumas_error_function","pumas_error_handler_get","pumas_error_handler_set","pumas_error_raise"]],["memory",["pumas_memory_allocator","pumas_memory_deallocator","pumas_memory_reallocator"]],["physics",["pumas_physics_composite_length","pumas_physics_composite_properties","pumas_physics_composite_update","pumas_physics_create","pumas_physics_cutoff","pumas_physics_dcs","pumas_physics_destroy","pumas_physics_dump","pumas_physics_elastic_ratio","pumas_physics_element_index","pumas_physics_element_length","pumas_physics_element_name","pumas_physics_element_properties","pumas_physics_load","pumas_physics_material_index","pumas_physics_material_length","pumas_physics_material_name","pumas_physics_material_properties","pumas_physics_particle","pumas_physics_print","pumas_physics_property_cross_section","pumas_physics_property_elastic_cutoff_angle","pumas_physics_property_elastic_path","pumas_physics_property_energy_straggling","pumas_physics_property_kinetic_energy","pumas_physics_property_magnetic_rotation","pumas_physics_property_proper_time","pumas_physics_property_range","pumas_physics_property_stopping_power","pumas_physics_property_transport_path","pumas_physics_table_index","pumas_physics_table_length","pumas_physics_table_value"]],["pumas",["pumas_constant","pumas_version"]],["recorder",["pumas_recorder_clear","pumas_recorder_create","pumas_recorder_destroy"]]]}